// @generated by Thrift for thrift/compiler/test/fixtures/params/src/module.thrift
// This file is probably not the place you want to edit!

//! Thrift error definitions for `module`.

/// Error definitions for `NestedContainers`.
pub mod nested_containers {

    pub type MapListError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::nested_containers::MapListExn> for
        ::std::result::Result<(), MapListError>
    {
        fn from(e: crate::services::nested_containers::MapListExn) -> Self {
            match e {
                crate::services::nested_containers::MapListExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::nested_containers::MapListExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(MapListError::ApplicationException(aexn)),
            }
        }
    }

    pub type MapSetError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::nested_containers::MapSetExn> for
        ::std::result::Result<(), MapSetError>
    {
        fn from(e: crate::services::nested_containers::MapSetExn) -> Self {
            match e {
                crate::services::nested_containers::MapSetExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::nested_containers::MapSetExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(MapSetError::ApplicationException(aexn)),
            }
        }
    }

    pub type ListMapError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::nested_containers::ListMapExn> for
        ::std::result::Result<(), ListMapError>
    {
        fn from(e: crate::services::nested_containers::ListMapExn) -> Self {
            match e {
                crate::services::nested_containers::ListMapExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::nested_containers::ListMapExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(ListMapError::ApplicationException(aexn)),
            }
        }
    }

    pub type ListSetError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::nested_containers::ListSetExn> for
        ::std::result::Result<(), ListSetError>
    {
        fn from(e: crate::services::nested_containers::ListSetExn) -> Self {
            match e {
                crate::services::nested_containers::ListSetExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::nested_containers::ListSetExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(ListSetError::ApplicationException(aexn)),
            }
        }
    }

    pub type TurtlesError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::nested_containers::TurtlesExn> for
        ::std::result::Result<(), TurtlesError>
    {
        fn from(e: crate::services::nested_containers::TurtlesExn) -> Self {
            match e {
                crate::services::nested_containers::TurtlesExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::nested_containers::TurtlesExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(TurtlesError::ApplicationException(aexn)),
            }
        }
    }

}

