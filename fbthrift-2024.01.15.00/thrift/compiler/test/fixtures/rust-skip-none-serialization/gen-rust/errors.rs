// @generated by Thrift for thrift/compiler/test/fixtures/rust-skip-none-serialization/src/module.thrift
// This file is probably not the place you want to edit!

//! Thrift error definitions for `module`.

/// Error definitions for `MyService`.
pub mod my_service {

    pub type PingError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::PingExn> for
        ::std::result::Result<(), PingError>
    {
        fn from(e: crate::services::my_service::PingExn) -> Self {
            match e {
                crate::services::my_service::PingExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::my_service::PingExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(PingError::ApplicationException(aexn)),
            }
        }
    }

    pub type GetRandomDataError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::GetRandomDataExn> for
        ::std::result::Result<::std::string::String, GetRandomDataError>
    {
        fn from(e: crate::services::my_service::GetRandomDataExn) -> Self {
            match e {
                crate::services::my_service::GetRandomDataExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::my_service::GetRandomDataExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(GetRandomDataError::ApplicationException(aexn)),
            }
        }
    }

    pub type HasDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::HasDataByIdExn> for
        ::std::result::Result<::std::primitive::bool, HasDataByIdError>
    {
        fn from(e: crate::services::my_service::HasDataByIdExn) -> Self {
            match e {
                crate::services::my_service::HasDataByIdExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::my_service::HasDataByIdExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(HasDataByIdError::ApplicationException(aexn)),
            }
        }
    }

    pub type GetDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::GetDataByIdExn> for
        ::std::result::Result<::std::string::String, GetDataByIdError>
    {
        fn from(e: crate::services::my_service::GetDataByIdExn) -> Self {
            match e {
                crate::services::my_service::GetDataByIdExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::my_service::GetDataByIdExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(GetDataByIdError::ApplicationException(aexn)),
            }
        }
    }

    pub type PutDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::PutDataByIdExn> for
        ::std::result::Result<(), PutDataByIdError>
    {
        fn from(e: crate::services::my_service::PutDataByIdExn) -> Self {
            match e {
                crate::services::my_service::PutDataByIdExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::my_service::PutDataByIdExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(PutDataByIdError::ApplicationException(aexn)),
            }
        }
    }

    pub type LobDataByIdError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::my_service::LobDataByIdExn> for
        ::std::result::Result<(), LobDataByIdError>
    {
        fn from(e: crate::services::my_service::LobDataByIdExn) -> Self {
            match e {
                crate::services::my_service::LobDataByIdExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::my_service::LobDataByIdExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(LobDataByIdError::ApplicationException(aexn)),
            }
        }
    }

}

