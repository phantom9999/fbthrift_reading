
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/patch/src/gen-python-capi/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/patch/src/gen-python-capi/module/thrift_types_capi.h>

#include "thrift/lib/thrift/gen-python-capi/patch/thrift_types_capi.h"
#include "thrift/lib/thrift/gen-python-capi/standard/thrift_types_capi.h"

namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_test__fixtures__patch__module__thrift_types_capi));
  return import();
}
  static constexpr std::int16_t _fbthrift__MyData__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__MyDataWithCustomDefault__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__Recursive__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__Bar__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__Loop__tuple_pos[1] = {
    1
  };
  static constexpr std::int16_t _fbthrift__RefFields__tuple_pos[7] = {
    1, 2, 3, 4, 5, 6, 7
  };
} // namespace

ExtractorResult<::test::fixtures::patch::MyData>
Extractor<::test::fixtures::patch::MyData>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyData");
      }
      return extractorError<::test::fixtures::patch::MyData>(
          "Marshal error: MyData");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::MyData>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::MyData>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyData>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::MyData cpp;
  std::optional<std::string_view> error;
  Extractor<Bytes>{}.extractInto(
      cpp.data1_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyData__tuple_pos[0]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.data2_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyData__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::MyData>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyData(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyData");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyData>::operator()(
    const ::test::fixtures::patch::MyData& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyData>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__MyData(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyData>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::patch::MyData& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__data1(
    Constructor<Bytes>{}
    .constructFrom(val.data1_ref()));
  if (!_fbthrift__data1 ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyData__tuple_pos[0],
          *_fbthrift__data1) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__data2(
    Constructor<int32_t>{}
    .constructFrom(val.data2_ref()));
  if (!_fbthrift__data2 ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyData__tuple_pos[1],
          *_fbthrift__data2) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefault>
Extractor<::test::fixtures::patch::MyDataWithCustomDefault>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyDataWithCustomDefault");
      }
      return extractorError<::test::fixtures::patch::MyDataWithCustomDefault>(
          "Marshal error: MyDataWithCustomDefault");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::MyDataWithCustomDefault>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefault>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyDataWithCustomDefault>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::MyDataWithCustomDefault cpp;
  std::optional<std::string_view> error;
  Extractor<Bytes>{}.extractInto(
      cpp.data1_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyDataWithCustomDefault__tuple_pos[0]),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.data2_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyDataWithCustomDefault__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::MyDataWithCustomDefault>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyDataWithCustomDefault(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataWithCustomDefault");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyDataWithCustomDefault>::operator()(
    const ::test::fixtures::patch::MyDataWithCustomDefault& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefault>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__MyDataWithCustomDefault(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefault>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::patch::MyDataWithCustomDefault& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__data1(
    Constructor<Bytes>{}
    .constructFrom(val.data1_ref()));
  if (!_fbthrift__data1 ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyDataWithCustomDefault__tuple_pos[0],
          *_fbthrift__data1) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__data2(
    Constructor<int32_t>{}
    .constructFrom(val.data2_ref()));
  if (!_fbthrift__data2 ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyDataWithCustomDefault__tuple_pos[1],
          *_fbthrift__data2) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::InnerUnion>
Extractor<::test::fixtures::patch::InnerUnion>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a InnerUnion");
      }
      return extractorError<::test::fixtures::patch::InnerUnion>(
          "Marshal error: InnerUnion");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::InnerUnion>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::InnerUnion>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::InnerUnion>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::InnerUnion cpp;
  std::optional<std::string_view> error;
  auto type_tag = Extractor<int64_t>{}(PyTuple_GET_ITEM(fbThriftData, 0));
  if (type_tag.hasError()) {
    return folly::makeUnexpected(type_tag.error());
  }
  switch (*type_tag) {
    case 0:
      break; // union is unset
    case 1:
      Extractor<Bytes>{}.extractInto(
          cpp.innerOption_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
  }
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::InnerUnion>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__InnerUnion(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: InnerUnion");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::InnerUnion>::operator()(
    const ::test::fixtures::patch::InnerUnion& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnion>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__InnerUnion(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnion>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::patch::InnerUnion& val) {
  int64_t type_key = static_cast<int64_t>(val.getType());
  StrongRef py_val;
  switch (type_key) {
    case 0:
      Py_INCREF(Py_None);
      py_val = StrongRef(Py_None);
      break;
    case 1:
      py_val = StrongRef(
          Constructor<Bytes>{}
          .constructFrom(val.innerOption_ref()));
      break;
  }
  if (!py_val) {
    return nullptr;
  }
  return unionTupleFromValue(type_key, *py_val);
}


ExtractorResult<::test::fixtures::patch::MyUnion>
Extractor<::test::fixtures::patch::MyUnion>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyUnion");
      }
      return extractorError<::test::fixtures::patch::MyUnion>(
          "Marshal error: MyUnion");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::MyUnion>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::MyUnion>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyUnion>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::MyUnion cpp;
  std::optional<std::string_view> error;
  auto type_tag = Extractor<int64_t>{}(PyTuple_GET_ITEM(fbThriftData, 0));
  if (type_tag.hasError()) {
    return folly::makeUnexpected(type_tag.error());
  }
  switch (*type_tag) {
    case 0:
      break; // union is unset
    case 1:
      Extractor<Bytes>{}.extractInto(
          cpp.option1_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
    case 2:
      Extractor<int32_t>{}.extractInto(
          cpp.option2_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
    case 3:
      Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::InnerUnion>>{}.extractInto(
          cpp.option3_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
  }
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::MyUnion>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyUnion(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyUnion");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyUnion>::operator()(
    const ::test::fixtures::patch::MyUnion& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnion>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__MyUnion(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnion>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::patch::MyUnion& val) {
  int64_t type_key = static_cast<int64_t>(val.getType());
  StrongRef py_val;
  switch (type_key) {
    case 0:
      Py_INCREF(Py_None);
      py_val = StrongRef(Py_None);
      break;
    case 1:
      py_val = StrongRef(
          Constructor<Bytes>{}
          .constructFrom(val.option1_ref()));
      break;
    case 2:
      py_val = StrongRef(
          Constructor<int32_t>{}
          .constructFrom(val.option2_ref()));
      break;
    case 3:
      py_val = StrongRef(
          Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::InnerUnion>>{}
          .constructFrom(val.option3_ref()));
      break;
  }
  if (!py_val) {
    return nullptr;
  }
  return unionTupleFromValue(type_key, *py_val);
}


ExtractorResult<::test::fixtures::patch::MyStruct>
Extractor<::test::fixtures::patch::MyStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyStruct>(
        "Thrift serialize error: MyStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::patch::MyStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyStruct>(
          "Init from fbthrift error: MyStruct");
  }
  return Extractor<::test::fixtures::patch::MyStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStruct>::operator()(
    const ::test::fixtures::patch::MyStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStruct>>::operator()(
    const ::test::fixtures::patch::MyStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::LateDefStruct>
Extractor<::test::fixtures::patch::LateDefStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a LateDefStruct");
      }
      return extractorError<::test::fixtures::patch::LateDefStruct>(
          "Marshal error: LateDefStruct");
  }
  return ::test::fixtures::patch::LateDefStruct{};
}

ExtractorResult<::test::fixtures::patch::LateDefStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::LateDefStruct>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::LateDefStruct cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::test::fixtures::patch::LateDefStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__LateDefStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: LateDefStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::LateDefStruct>::operator()(
    const ::test::fixtures::patch::LateDefStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__LateDefStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStruct>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::patch::LateDefStruct& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::Recursive>
Extractor<::test::fixtures::patch::Recursive>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a Recursive");
      }
      return extractorError<::test::fixtures::patch::Recursive>(
          "Marshal error: Recursive");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::Recursive>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::Recursive>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::Recursive>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::Recursive cpp;
  std::optional<std::string_view> error;
  Extractor<map<Bytes, ::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::Recursive>>>{}.extractInto(
      cpp.nodes_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__Recursive__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::Recursive>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__Recursive(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Recursive");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::Recursive>::operator()(
    const ::test::fixtures::patch::Recursive& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Recursive>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__Recursive(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Recursive>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::patch::Recursive& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__nodes(
    Constructor<map<Bytes, ::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::Recursive>>>{}
    .constructFrom(val.nodes_ref()));
  if (!_fbthrift__nodes ||
      setStructField(
          *fbthrift_data,
          _fbthrift__Recursive__tuple_pos[0],
          *_fbthrift__nodes) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::Bar>
Extractor<::test::fixtures::patch::Bar>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a Bar");
      }
      return extractorError<::test::fixtures::patch::Bar>(
          "Marshal error: Bar");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::Bar>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::Bar>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::Bar>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::Bar cpp;
  std::optional<std::string_view> error;
  Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::Loop>>{}.extractInto(
      cpp.loop_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__Bar__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::Bar>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__Bar(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Bar");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::Bar>::operator()(
    const ::test::fixtures::patch::Bar& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Bar>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__Bar(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Bar>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::patch::Bar& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__loop(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::Loop>>{}
    .constructFrom(val.loop_ref()));
  if (!_fbthrift__loop ||
      setStructField(
          *fbthrift_data,
          _fbthrift__Bar__tuple_pos[0],
          *_fbthrift__loop) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::Loop>
Extractor<::test::fixtures::patch::Loop>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a Loop");
      }
      return extractorError<::test::fixtures::patch::Loop>(
          "Marshal error: Loop");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::Loop>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::Loop>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::Loop>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::Loop cpp;
  std::optional<std::string_view> error;
  Extractor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::Bar>>{}.extractInto(
      cpp.bar_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__Loop__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::Loop>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__Loop(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Loop");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::Loop>::operator()(
    const ::test::fixtures::patch::Loop& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Loop>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__Loop(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::Loop>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::patch::Loop& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__bar(
    Constructor<::apache::thrift::python::capi::ComposedStruct<::test::fixtures::patch::Bar>>{}
    .constructFrom(val.bar_ref()));
  if (!_fbthrift__bar ||
      setStructField(
          *fbthrift_data,
          _fbthrift__Loop__tuple_pos[0],
          *_fbthrift__bar) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::RefFields>
Extractor<::test::fixtures::patch::RefFields>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a RefFields");
      }
      return extractorError<::test::fixtures::patch::RefFields>(
          "Marshal error: RefFields");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::patch::RefFields>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::patch::RefFields>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::RefFields>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::patch::RefFields cpp;
  std::optional<std::string_view> error;
  Extractor<list<int32_t>>{}.extractInto(
      cpp.unique_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[0]),
      error);
  Extractor<list<int32_t>>{}.extractInto(
      cpp.shared_const_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[1]),
      error);
  Extractor<list<int32_t>>{}.extractInto(
      cpp.shared_mustable_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[2]),
      error);
  Extractor<list<int32_t>>{}.extractInto(
      cpp.opt_unique_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[3]),
      error);
  Extractor<list<int32_t>>{}.extractInto(
      cpp.opt_shared_const_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[4]),
      error);
  Extractor<list<int32_t>>{}.extractInto(
      cpp.opt_shared_mustable_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[5]),
      error);
  Extractor<list<int32_t>>{}.extractInto(
      cpp.opt_box_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__RefFields__tuple_pos[6]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::patch::RefFields>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__RefFields(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: RefFields");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::RefFields>::operator()(
    const ::test::fixtures::patch::RefFields& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFields>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__patch__module__RefFields(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFields>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::patch::RefFields& val) {
  StrongRef fbthrift_data(createStructTuple(7));
  StrongRef _fbthrift__unique(
    Constructor<list<int32_t>>{}
    .constructFrom(val.unique_ref()));
  if (!_fbthrift__unique ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[0],
          *_fbthrift__unique) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__shared_const(
    Constructor<list<int32_t>>{}
    .constructFrom(val.shared_const_ref()));
  if (!_fbthrift__shared_const ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[1],
          *_fbthrift__shared_const) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__shared_mustable(
    Constructor<list<int32_t>>{}
    .constructFrom(val.shared_mustable_ref()));
  if (!_fbthrift__shared_mustable ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[2],
          *_fbthrift__shared_mustable) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__opt_unique(
    Constructor<list<int32_t>>{}
    .constructFrom(val.opt_unique_ref()));
  if (!_fbthrift__opt_unique ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[3],
          *_fbthrift__opt_unique) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__opt_shared_const(
    Constructor<list<int32_t>>{}
    .constructFrom(val.opt_shared_const_ref()));
  if (!_fbthrift__opt_shared_const ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[4],
          *_fbthrift__opt_shared_const) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__opt_shared_mustable(
    Constructor<list<int32_t>>{}
    .constructFrom(val.opt_shared_mustable_ref()));
  if (!_fbthrift__opt_shared_mustable ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[5],
          *_fbthrift__opt_shared_mustable) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__opt_box(
    Constructor<list<int32_t>>{}
    .constructFrom(val.opt_box_ref()));
  if (!_fbthrift__opt_box ||
      setStructField(
          *fbthrift_data,
          _fbthrift__RefFields__tuple_pos[6],
          *_fbthrift__opt_box) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::patch::MyDataPatchStruct>
Extractor<::test::fixtures::patch::MyDataPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyDataPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyDataPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyDataPatchStruct>(
        "Thrift serialize error: MyDataPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyDataPatchStruct, ::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyDataPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyDataPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyDataPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyDataPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyDataPatchStruct>(
          "Init from fbthrift error: MyDataPatch");
  }
  return Extractor<::test::fixtures::patch::MyDataPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyDataPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyDataPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyDataPatchStruct>::operator()(
    const ::test::fixtures::patch::MyDataPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyDataPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataPatchStruct>>::operator()(
    const ::test::fixtures::patch::MyDataPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyDataPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyDataFieldPatchStruct>
Extractor<::test::fixtures::patch::MyDataFieldPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyDataFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyDataFieldPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyDataFieldPatchStruct>(
        "Thrift serialize error: MyDataFieldPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyDataFieldPatchStruct, ::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyDataFieldPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyDataFieldPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyDataFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyDataFieldPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyDataFieldPatchStruct>(
          "Init from fbthrift error: MyDataFieldPatch");
  }
  return Extractor<::test::fixtures::patch::MyDataFieldPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyDataFieldPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyDataFieldPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataFieldPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyDataFieldPatchStruct>::operator()(
    const ::test::fixtures::patch::MyDataFieldPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyDataFieldPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataFieldPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataFieldPatchStruct>>::operator()(
    const ::test::fixtures::patch::MyDataFieldPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyDataFieldPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyDataEnsureStruct>
Extractor<::test::fixtures::patch::MyDataEnsureStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyDataEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyDataEnsureStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyDataEnsureStruct>(
        "Thrift serialize error: MyDataEnsureStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::patch::MyDataEnsureStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyDataEnsureStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyDataEnsureStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyDataEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyDataEnsureStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyDataEnsureStruct>(
          "Init from fbthrift error: MyDataEnsureStruct");
  }
  return Extractor<::test::fixtures::patch::MyDataEnsureStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyDataEnsureStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyDataEnsureStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataEnsureStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyDataEnsureStruct>::operator()(
    const ::test::fixtures::patch::MyDataEnsureStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyDataEnsureStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataEnsureStruct>>::operator()(
    const ::test::fixtures::patch::MyDataEnsureStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyDataEnsureStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>
Extractor<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyDataWithCustomDefaultPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>(
        "Thrift serialize error: MyDataWithCustomDefaultPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct, ::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyDataWithCustomDefaultPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>(
          "Init from fbthrift error: MyDataWithCustomDefaultPatch");
  }
  return Extractor<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyDataWithCustomDefaultPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataWithCustomDefaultPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>::operator()(
    const ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyDataWithCustomDefaultPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>>::operator()(
    const ::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyDataWithCustomDefaultPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>
Extractor<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyDataWithCustomDefaultFieldPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>(
        "Thrift serialize error: MyDataWithCustomDefaultFieldPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct, ::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyDataWithCustomDefaultFieldPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>(
          "Init from fbthrift error: MyDataWithCustomDefaultFieldPatch");
  }
  return Extractor<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyDataWithCustomDefaultFieldPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataWithCustomDefaultFieldPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>::operator()(
    const ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyDataWithCustomDefaultFieldPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>>::operator()(
    const ::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyDataWithCustomDefaultFieldPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
Extractor<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyDataWithCustomDefaultEnsureStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>(
        "Thrift serialize error: MyDataWithCustomDefaultEnsureStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyDataWithCustomDefaultEnsureStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>(
          "Init from fbthrift error: MyDataWithCustomDefaultEnsureStruct");
  }
  return Extractor<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyDataWithCustomDefaultEnsureStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataWithCustomDefaultEnsureStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>::operator()(
    const ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyDataWithCustomDefaultEnsureStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>>::operator()(
    const ::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyDataWithCustomDefaultEnsureStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::InnerUnionPatchStruct>
Extractor<::test::fixtures::patch::InnerUnionPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::InnerUnionPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__InnerUnionPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::InnerUnionPatchStruct>(
        "Thrift serialize error: InnerUnionPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::InnerUnionPatchStruct, ::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::InnerUnionPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::InnerUnionPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::InnerUnionPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__InnerUnionPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::InnerUnionPatchStruct>(
          "Init from fbthrift error: InnerUnionPatch");
  }
  return Extractor<::test::fixtures::patch::InnerUnionPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::InnerUnionPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__InnerUnionPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: InnerUnionPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::InnerUnionPatchStruct>::operator()(
    const ::test::fixtures::patch::InnerUnionPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__InnerUnionPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::InnerUnionPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionPatchStruct>>::operator()(
    const ::test::fixtures::patch::InnerUnionPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::InnerUnionPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::InnerUnionFieldPatchStruct>
Extractor<::test::fixtures::patch::InnerUnionFieldPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::InnerUnionFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__InnerUnionFieldPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::InnerUnionFieldPatchStruct>(
        "Thrift serialize error: InnerUnionFieldPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::InnerUnionFieldPatchStruct, ::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::InnerUnionFieldPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::InnerUnionFieldPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::InnerUnionFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__InnerUnionFieldPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::InnerUnionFieldPatchStruct>(
          "Init from fbthrift error: InnerUnionFieldPatch");
  }
  return Extractor<::test::fixtures::patch::InnerUnionFieldPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::InnerUnionFieldPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__InnerUnionFieldPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: InnerUnionFieldPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::InnerUnionFieldPatchStruct>::operator()(
    const ::test::fixtures::patch::InnerUnionFieldPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__InnerUnionFieldPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::InnerUnionFieldPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::InnerUnionFieldPatchStruct>>::operator()(
    const ::test::fixtures::patch::InnerUnionFieldPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::InnerUnionFieldPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyUnionPatchStruct>
Extractor<::test::fixtures::patch::MyUnionPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyUnionPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyUnionPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyUnionPatchStruct>(
        "Thrift serialize error: MyUnionPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyUnionPatchStruct, ::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyUnionPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyUnionPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyUnionPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyUnionPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyUnionPatchStruct>(
          "Init from fbthrift error: MyUnionPatch");
  }
  return Extractor<::test::fixtures::patch::MyUnionPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyUnionPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyUnionPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyUnionPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyUnionPatchStruct>::operator()(
    const ::test::fixtures::patch::MyUnionPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyUnionPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::UnionPatchAdapter<::test::fixtures::patch::MyUnionPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionPatchStruct>>::operator()(
    const ::test::fixtures::patch::MyUnionPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyUnionPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyUnionFieldPatchStruct>
Extractor<::test::fixtures::patch::MyUnionFieldPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyUnionFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyUnionFieldPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyUnionFieldPatchStruct>(
        "Thrift serialize error: MyUnionFieldPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyUnionFieldPatchStruct, ::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyUnionFieldPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyUnionFieldPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyUnionFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyUnionFieldPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyUnionFieldPatchStruct>(
          "Init from fbthrift error: MyUnionFieldPatch");
  }
  return Extractor<::test::fixtures::patch::MyUnionFieldPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyUnionFieldPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyUnionFieldPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyUnionFieldPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyUnionFieldPatchStruct>::operator()(
    const ::test::fixtures::patch::MyUnionFieldPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyUnionFieldPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyUnionFieldPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyUnionFieldPatchStruct>>::operator()(
    const ::test::fixtures::patch::MyUnionFieldPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyUnionFieldPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyStructPatchStruct>
Extractor<::test::fixtures::patch::MyStructPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyStructPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyStructPatchStruct>(
        "Thrift serialize error: MyStructPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyStructPatchStruct, ::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyStructPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyStructPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStructPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyStructPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyStructPatchStruct>(
          "Init from fbthrift error: MyStructPatch");
  }
  return Extractor<::test::fixtures::patch::MyStructPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyStructPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStructPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStructPatchStruct>::operator()(
    const ::test::fixtures::patch::MyStructPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyStructPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::MyStructPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructPatchStruct>>::operator()(
    const ::test::fixtures::patch::MyStructPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyStructPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyStructField10PatchStruct>
Extractor<::test::fixtures::patch::MyStructField10PatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField10PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyStructField10Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyStructField10PatchStruct>(
        "Thrift serialize error: MyStructField10Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyStructField10PatchStruct, ::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyStructField10PatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStructField10PatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField10PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyStructField10Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyStructField10PatchStruct>(
          "Init from fbthrift error: MyStructField10Patch");
  }
  return Extractor<::test::fixtures::patch::MyStructField10PatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyStructField10PatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStructField10Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructField10Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStructField10PatchStruct>::operator()(
    const ::test::fixtures::patch::MyStructField10PatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyStructField10Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField10PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField10PatchStruct>>::operator()(
    const ::test::fixtures::patch::MyStructField10PatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyStructField10PatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyStructField23PatchStruct>
Extractor<::test::fixtures::patch::MyStructField23PatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField23PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyStructField23Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyStructField23PatchStruct>(
        "Thrift serialize error: MyStructField23Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyStructField23PatchStruct, ::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyStructField23PatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStructField23PatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField23PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyStructField23Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyStructField23PatchStruct>(
          "Init from fbthrift error: MyStructField23Patch");
  }
  return Extractor<::test::fixtures::patch::MyStructField23PatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyStructField23PatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStructField23Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructField23Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStructField23PatchStruct>::operator()(
    const ::test::fixtures::patch::MyStructField23PatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyStructField23Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::MyStructField23PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField23PatchStruct>>::operator()(
    const ::test::fixtures::patch::MyStructField23PatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyStructField23PatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyStructField26PatchStruct>
Extractor<::test::fixtures::patch::MyStructField26PatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField26PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyStructField26Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyStructField26PatchStruct>(
        "Thrift serialize error: MyStructField26Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyStructField26PatchStruct, ::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyStructField26PatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStructField26PatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField26PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyStructField26Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyStructField26PatchStruct>(
          "Init from fbthrift error: MyStructField26Patch");
  }
  return Extractor<::test::fixtures::patch::MyStructField26PatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyStructField26PatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStructField26Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructField26Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStructField26PatchStruct>::operator()(
    const ::test::fixtures::patch::MyStructField26PatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyStructField26Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField26PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField26PatchStruct>>::operator()(
    const ::test::fixtures::patch::MyStructField26PatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyStructField26PatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyStructField27PatchStruct>
Extractor<::test::fixtures::patch::MyStructField27PatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField27PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyStructField27Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyStructField27PatchStruct>(
        "Thrift serialize error: MyStructField27Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyStructField27PatchStruct, ::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyStructField27PatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStructField27PatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField27PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyStructField27Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyStructField27PatchStruct>(
          "Init from fbthrift error: MyStructField27Patch");
  }
  return Extractor<::test::fixtures::patch::MyStructField27PatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyStructField27PatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStructField27Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructField27Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStructField27PatchStruct>::operator()(
    const ::test::fixtures::patch::MyStructField27PatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyStructField27Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::patch::MyStructField27PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField27PatchStruct>>::operator()(
    const ::test::fixtures::patch::MyStructField27PatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyStructField27PatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyStructField28PatchStruct>
Extractor<::test::fixtures::patch::MyStructField28PatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField28PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyStructField28Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyStructField28PatchStruct>(
        "Thrift serialize error: MyStructField28Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyStructField28PatchStruct, ::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyStructField28PatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStructField28PatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField28PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyStructField28Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyStructField28PatchStruct>(
          "Init from fbthrift error: MyStructField28Patch");
  }
  return Extractor<::test::fixtures::patch::MyStructField28PatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyStructField28PatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStructField28Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructField28Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStructField28PatchStruct>::operator()(
    const ::test::fixtures::patch::MyStructField28PatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyStructField28Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField28PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField28PatchStruct>>::operator()(
    const ::test::fixtures::patch::MyStructField28PatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyStructField28PatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyStructField29PatchStruct>
Extractor<::test::fixtures::patch::MyStructField29PatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField29PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyStructField29Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyStructField29PatchStruct>(
        "Thrift serialize error: MyStructField29Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyStructField29PatchStruct, ::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyStructField29PatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStructField29PatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField29PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyStructField29Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyStructField29PatchStruct>(
          "Init from fbthrift error: MyStructField29Patch");
  }
  return Extractor<::test::fixtures::patch::MyStructField29PatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyStructField29PatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStructField29Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructField29Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStructField29PatchStruct>::operator()(
    const ::test::fixtures::patch::MyStructField29PatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyStructField29Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::MyStructField29PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField29PatchStruct>>::operator()(
    const ::test::fixtures::patch::MyStructField29PatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyStructField29PatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyStructField30PatchStruct>
Extractor<::test::fixtures::patch::MyStructField30PatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField30PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyStructField30Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyStructField30PatchStruct>(
        "Thrift serialize error: MyStructField30Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyStructField30PatchStruct, ::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyStructField30PatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStructField30PatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField30PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyStructField30Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyStructField30PatchStruct>(
          "Init from fbthrift error: MyStructField30Patch");
  }
  return Extractor<::test::fixtures::patch::MyStructField30PatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyStructField30PatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStructField30Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructField30Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStructField30PatchStruct>::operator()(
    const ::test::fixtures::patch::MyStructField30PatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyStructField30Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField30PatchStruct>>::operator()(
    const ::test::fixtures::patch::MyStructField30PatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyStructField30PatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyStructField30Patch1Struct>
Extractor<::test::fixtures::patch::MyStructField30Patch1Struct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField30Patch1Struct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyStructField30Patch1(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyStructField30Patch1Struct>(
        "Thrift serialize error: MyStructField30Patch1");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyStructField30Patch1Struct, ::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30Patch1Struct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyStructField30Patch1Struct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStructField30Patch1Struct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructField30Patch1Struct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyStructField30Patch1(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyStructField30Patch1Struct>(
          "Init from fbthrift error: MyStructField30Patch1");
  }
  return Extractor<::test::fixtures::patch::MyStructField30Patch1Struct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyStructField30Patch1Struct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStructField30Patch1(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructField30Patch1");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStructField30Patch1Struct>::operator()(
    const ::test::fixtures::patch::MyStructField30Patch1Struct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyStructField30Patch1(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::patch::MyStructField30Patch1Struct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructField30Patch1Struct>>::operator()(
    const ::test::fixtures::patch::MyStructField30Patch1Struct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyStructField30Patch1Struct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyStructFieldPatchStruct>
Extractor<::test::fixtures::patch::MyStructFieldPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyStructFieldPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyStructFieldPatchStruct>(
        "Thrift serialize error: MyStructFieldPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::MyStructFieldPatchStruct, ::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyStructFieldPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStructFieldPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyStructFieldPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyStructFieldPatchStruct>(
          "Init from fbthrift error: MyStructFieldPatch");
  }
  return Extractor<::test::fixtures::patch::MyStructFieldPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyStructFieldPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStructFieldPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructFieldPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStructFieldPatchStruct>::operator()(
    const ::test::fixtures::patch::MyStructFieldPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyStructFieldPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::MyStructFieldPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructFieldPatchStruct>>::operator()(
    const ::test::fixtures::patch::MyStructFieldPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyStructFieldPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyStructEnsureStruct>
Extractor<::test::fixtures::patch::MyStructEnsureStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__MyStructEnsureStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::MyStructEnsureStruct>(
        "Thrift serialize error: MyStructEnsureStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::patch::MyStructEnsureStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::patch::MyStructEnsureStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::MyStructEnsureStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::MyStructEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__MyStructEnsureStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::MyStructEnsureStruct>(
          "Init from fbthrift error: MyStructEnsureStruct");
  }
  return Extractor<::test::fixtures::patch::MyStructEnsureStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::MyStructEnsureStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyStructEnsureStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructEnsureStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyStructEnsureStruct>::operator()(
    const ::test::fixtures::patch::MyStructEnsureStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyStructEnsureStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::MyStructEnsureStruct>>::operator()(
    const ::test::fixtures::patch::MyStructEnsureStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::MyStructEnsureStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::LateDefStructPatchStruct>
Extractor<::test::fixtures::patch::LateDefStructPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::LateDefStructPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__LateDefStructPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::LateDefStructPatchStruct>(
        "Thrift serialize error: LateDefStructPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::LateDefStructPatchStruct, ::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::LateDefStructPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::LateDefStructPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::LateDefStructPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__LateDefStructPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::LateDefStructPatchStruct>(
          "Init from fbthrift error: LateDefStructPatch");
  }
  return Extractor<::test::fixtures::patch::LateDefStructPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::LateDefStructPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__LateDefStructPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: LateDefStructPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::LateDefStructPatchStruct>::operator()(
    const ::test::fixtures::patch::LateDefStructPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__LateDefStructPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::LateDefStructPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructPatchStruct>>::operator()(
    const ::test::fixtures::patch::LateDefStructPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::LateDefStructPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::LateDefStructFieldPatchStruct>
Extractor<::test::fixtures::patch::LateDefStructFieldPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::LateDefStructFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__LateDefStructFieldPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::LateDefStructFieldPatchStruct>(
        "Thrift serialize error: LateDefStructFieldPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::LateDefStructFieldPatchStruct, ::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::LateDefStructFieldPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::LateDefStructFieldPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::LateDefStructFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__LateDefStructFieldPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::LateDefStructFieldPatchStruct>(
          "Init from fbthrift error: LateDefStructFieldPatch");
  }
  return Extractor<::test::fixtures::patch::LateDefStructFieldPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::LateDefStructFieldPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__LateDefStructFieldPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: LateDefStructFieldPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::LateDefStructFieldPatchStruct>::operator()(
    const ::test::fixtures::patch::LateDefStructFieldPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__LateDefStructFieldPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::LateDefStructFieldPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructFieldPatchStruct>>::operator()(
    const ::test::fixtures::patch::LateDefStructFieldPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::LateDefStructFieldPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::LateDefStructEnsureStruct>
Extractor<::test::fixtures::patch::LateDefStructEnsureStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::LateDefStructEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__LateDefStructEnsureStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::LateDefStructEnsureStruct>(
        "Thrift serialize error: LateDefStructEnsureStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::patch::LateDefStructEnsureStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::patch::LateDefStructEnsureStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::LateDefStructEnsureStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::LateDefStructEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__LateDefStructEnsureStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::LateDefStructEnsureStruct>(
          "Init from fbthrift error: LateDefStructEnsureStruct");
  }
  return Extractor<::test::fixtures::patch::LateDefStructEnsureStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::LateDefStructEnsureStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__LateDefStructEnsureStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: LateDefStructEnsureStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::LateDefStructEnsureStruct>::operator()(
    const ::test::fixtures::patch::LateDefStructEnsureStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__LateDefStructEnsureStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LateDefStructEnsureStruct>>::operator()(
    const ::test::fixtures::patch::LateDefStructEnsureStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::LateDefStructEnsureStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::RecursivePatchStruct>
Extractor<::test::fixtures::patch::RecursivePatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RecursivePatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__RecursivePatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::RecursivePatchStruct>(
        "Thrift serialize error: RecursivePatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::RecursivePatchStruct, ::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::RecursivePatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::RecursivePatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::RecursivePatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RecursivePatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__RecursivePatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::RecursivePatchStruct>(
          "Init from fbthrift error: RecursivePatch");
  }
  return Extractor<::test::fixtures::patch::RecursivePatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::RecursivePatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__RecursivePatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: RecursivePatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::RecursivePatchStruct>::operator()(
    const ::test::fixtures::patch::RecursivePatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__RecursivePatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::RecursivePatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursivePatchStruct>>::operator()(
    const ::test::fixtures::patch::RecursivePatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::RecursivePatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::RecursiveField1PatchStruct>
Extractor<::test::fixtures::patch::RecursiveField1PatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RecursiveField1PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__RecursiveField1Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::RecursiveField1PatchStruct>(
        "Thrift serialize error: RecursiveField1Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::RecursiveField1PatchStruct, ::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::RecursiveField1PatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::RecursiveField1PatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RecursiveField1PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__RecursiveField1Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::RecursiveField1PatchStruct>(
          "Init from fbthrift error: RecursiveField1Patch");
  }
  return Extractor<::test::fixtures::patch::RecursiveField1PatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::RecursiveField1PatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__RecursiveField1Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: RecursiveField1Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::RecursiveField1PatchStruct>::operator()(
    const ::test::fixtures::patch::RecursiveField1PatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__RecursiveField1Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::RecursiveField1PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveField1PatchStruct>>::operator()(
    const ::test::fixtures::patch::RecursiveField1PatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::RecursiveField1PatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::RecursiveFieldPatchStruct>
Extractor<::test::fixtures::patch::RecursiveFieldPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RecursiveFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__RecursiveFieldPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::RecursiveFieldPatchStruct>(
        "Thrift serialize error: RecursiveFieldPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::RecursiveFieldPatchStruct, ::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::RecursiveFieldPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::RecursiveFieldPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RecursiveFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__RecursiveFieldPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::RecursiveFieldPatchStruct>(
          "Init from fbthrift error: RecursiveFieldPatch");
  }
  return Extractor<::test::fixtures::patch::RecursiveFieldPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::RecursiveFieldPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__RecursiveFieldPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: RecursiveFieldPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::RecursiveFieldPatchStruct>::operator()(
    const ::test::fixtures::patch::RecursiveFieldPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__RecursiveFieldPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RecursiveFieldPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveFieldPatchStruct>>::operator()(
    const ::test::fixtures::patch::RecursiveFieldPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::RecursiveFieldPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::RecursiveEnsureStruct>
Extractor<::test::fixtures::patch::RecursiveEnsureStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RecursiveEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__RecursiveEnsureStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::RecursiveEnsureStruct>(
        "Thrift serialize error: RecursiveEnsureStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::patch::RecursiveEnsureStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::patch::RecursiveEnsureStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::RecursiveEnsureStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RecursiveEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__RecursiveEnsureStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::RecursiveEnsureStruct>(
          "Init from fbthrift error: RecursiveEnsureStruct");
  }
  return Extractor<::test::fixtures::patch::RecursiveEnsureStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::RecursiveEnsureStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__RecursiveEnsureStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: RecursiveEnsureStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::RecursiveEnsureStruct>::operator()(
    const ::test::fixtures::patch::RecursiveEnsureStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__RecursiveEnsureStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RecursiveEnsureStruct>>::operator()(
    const ::test::fixtures::patch::RecursiveEnsureStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::RecursiveEnsureStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::BarPatchStruct>
Extractor<::test::fixtures::patch::BarPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::BarPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__BarPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::BarPatchStruct>(
        "Thrift serialize error: BarPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::BarPatchStruct, ::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::BarPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::BarPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::BarPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::BarPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__BarPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::BarPatchStruct>(
          "Init from fbthrift error: BarPatch");
  }
  return Extractor<::test::fixtures::patch::BarPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::BarPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__BarPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: BarPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::BarPatchStruct>::operator()(
    const ::test::fixtures::patch::BarPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__BarPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::BarPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarPatchStruct>>::operator()(
    const ::test::fixtures::patch::BarPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::BarPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::BarFieldPatchStruct>
Extractor<::test::fixtures::patch::BarFieldPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::BarFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__BarFieldPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::BarFieldPatchStruct>(
        "Thrift serialize error: BarFieldPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::BarFieldPatchStruct, ::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::BarFieldPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::BarFieldPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::BarFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__BarFieldPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::BarFieldPatchStruct>(
          "Init from fbthrift error: BarFieldPatch");
  }
  return Extractor<::test::fixtures::patch::BarFieldPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::BarFieldPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__BarFieldPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: BarFieldPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::BarFieldPatchStruct>::operator()(
    const ::test::fixtures::patch::BarFieldPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__BarFieldPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::BarFieldPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarFieldPatchStruct>>::operator()(
    const ::test::fixtures::patch::BarFieldPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::BarFieldPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::BarEnsureStruct>
Extractor<::test::fixtures::patch::BarEnsureStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::BarEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__BarEnsureStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::BarEnsureStruct>(
        "Thrift serialize error: BarEnsureStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::patch::BarEnsureStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::patch::BarEnsureStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::BarEnsureStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::BarEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__BarEnsureStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::BarEnsureStruct>(
          "Init from fbthrift error: BarEnsureStruct");
  }
  return Extractor<::test::fixtures::patch::BarEnsureStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::BarEnsureStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__BarEnsureStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: BarEnsureStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::BarEnsureStruct>::operator()(
    const ::test::fixtures::patch::BarEnsureStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__BarEnsureStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::BarEnsureStruct>>::operator()(
    const ::test::fixtures::patch::BarEnsureStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::BarEnsureStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::LoopPatchStruct>
Extractor<::test::fixtures::patch::LoopPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::LoopPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__LoopPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::LoopPatchStruct>(
        "Thrift serialize error: LoopPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::LoopPatchStruct, ::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::LoopPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::LoopPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::LoopPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__LoopPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::LoopPatchStruct>(
          "Init from fbthrift error: LoopPatch");
  }
  return Extractor<::test::fixtures::patch::LoopPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::LoopPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__LoopPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: LoopPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::LoopPatchStruct>::operator()(
    const ::test::fixtures::patch::LoopPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__LoopPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::patch::LoopPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::LoopPatchStruct>>::operator()(
    const ::test::fixtures::patch::LoopPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::LoopPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::RefFieldsPatchStruct>
Extractor<::test::fixtures::patch::RefFieldsPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RefFieldsPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__RefFieldsPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::RefFieldsPatchStruct>(
        "Thrift serialize error: RefFieldsPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::RefFieldsPatchStruct, ::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::RefFieldsPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::RefFieldsPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::RefFieldsPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RefFieldsPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__RefFieldsPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::RefFieldsPatchStruct>(
          "Init from fbthrift error: RefFieldsPatch");
  }
  return Extractor<::test::fixtures::patch::RefFieldsPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::RefFieldsPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__RefFieldsPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: RefFieldsPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::RefFieldsPatchStruct>::operator()(
    const ::test::fixtures::patch::RefFieldsPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__RefFieldsPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::patch::RefFieldsPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsPatchStruct>>::operator()(
    const ::test::fixtures::patch::RefFieldsPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::RefFieldsPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::RefFieldsField1PatchStruct>
Extractor<::test::fixtures::patch::RefFieldsField1PatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RefFieldsField1PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__RefFieldsField1Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::RefFieldsField1PatchStruct>(
        "Thrift serialize error: RefFieldsField1Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::RefFieldsField1PatchStruct, ::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField1PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::RefFieldsField1PatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::RefFieldsField1PatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RefFieldsField1PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__RefFieldsField1Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::RefFieldsField1PatchStruct>(
          "Init from fbthrift error: RefFieldsField1Patch");
  }
  return Extractor<::test::fixtures::patch::RefFieldsField1PatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::RefFieldsField1PatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__RefFieldsField1Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: RefFieldsField1Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::RefFieldsField1PatchStruct>::operator()(
    const ::test::fixtures::patch::RefFieldsField1PatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__RefFieldsField1Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField1PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField1PatchStruct>>::operator()(
    const ::test::fixtures::patch::RefFieldsField1PatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::RefFieldsField1PatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::RefFieldsField4PatchStruct>
Extractor<::test::fixtures::patch::RefFieldsField4PatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RefFieldsField4PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__RefFieldsField4Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::RefFieldsField4PatchStruct>(
        "Thrift serialize error: RefFieldsField4Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::RefFieldsField4PatchStruct, ::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField4PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::RefFieldsField4PatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::RefFieldsField4PatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RefFieldsField4PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__RefFieldsField4Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::RefFieldsField4PatchStruct>(
          "Init from fbthrift error: RefFieldsField4Patch");
  }
  return Extractor<::test::fixtures::patch::RefFieldsField4PatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::RefFieldsField4PatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__RefFieldsField4Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: RefFieldsField4Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::RefFieldsField4PatchStruct>::operator()(
    const ::test::fixtures::patch::RefFieldsField4PatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__RefFieldsField4Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField4PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField4PatchStruct>>::operator()(
    const ::test::fixtures::patch::RefFieldsField4PatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::RefFieldsField4PatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::RefFieldsField7PatchStruct>
Extractor<::test::fixtures::patch::RefFieldsField7PatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RefFieldsField7PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__RefFieldsField7Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::RefFieldsField7PatchStruct>(
        "Thrift serialize error: RefFieldsField7Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::RefFieldsField7PatchStruct, ::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField7PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::RefFieldsField7PatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::RefFieldsField7PatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RefFieldsField7PatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__RefFieldsField7Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::RefFieldsField7PatchStruct>(
          "Init from fbthrift error: RefFieldsField7Patch");
  }
  return Extractor<::test::fixtures::patch::RefFieldsField7PatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::RefFieldsField7PatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__RefFieldsField7Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: RefFieldsField7Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::RefFieldsField7PatchStruct>::operator()(
    const ::test::fixtures::patch::RefFieldsField7PatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__RefFieldsField7Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::patch::RefFieldsField7PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsField7PatchStruct>>::operator()(
    const ::test::fixtures::patch::RefFieldsField7PatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::RefFieldsField7PatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::RefFieldsFieldPatchStruct>
Extractor<::test::fixtures::patch::RefFieldsFieldPatchStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RefFieldsFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__RefFieldsFieldPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::RefFieldsFieldPatchStruct>(
        "Thrift serialize error: RefFieldsFieldPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::patch::RefFieldsFieldPatchStruct, ::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::patch::RefFieldsFieldPatchStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::RefFieldsFieldPatchStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RefFieldsFieldPatchStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__RefFieldsFieldPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::RefFieldsFieldPatchStruct>(
          "Init from fbthrift error: RefFieldsFieldPatch");
  }
  return Extractor<::test::fixtures::patch::RefFieldsFieldPatchStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::RefFieldsFieldPatchStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__RefFieldsFieldPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: RefFieldsFieldPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::RefFieldsFieldPatchStruct>::operator()(
    const ::test::fixtures::patch::RefFieldsFieldPatchStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__RefFieldsFieldPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::patch::RefFieldsFieldPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsFieldPatchStruct>>::operator()(
    const ::test::fixtures::patch::RefFieldsFieldPatchStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::RefFieldsFieldPatchStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::RefFieldsEnsureStruct>
Extractor<::test::fixtures::patch::RefFieldsEnsureStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RefFieldsEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__patch__module__RefFieldsEnsureStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::patch::RefFieldsEnsureStruct>(
        "Thrift serialize error: RefFieldsEnsureStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::patch::RefFieldsEnsureStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::patch::RefFieldsEnsureStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::patch::RefFieldsEnsureStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::patch::RefFieldsEnsureStruct>(
      "Module test.fixtures.patch.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__patch__module__RefFieldsEnsureStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::patch::RefFieldsEnsureStruct>(
          "Init from fbthrift error: RefFieldsEnsureStruct");
  }
  return Extractor<::test::fixtures::patch::RefFieldsEnsureStruct>{}(*obj);
}

int Extractor<::test::fixtures::patch::RefFieldsEnsureStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__RefFieldsEnsureStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: RefFieldsEnsureStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::RefFieldsEnsureStruct>::operator()(
    const ::test::fixtures::patch::RefFieldsEnsureStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__RefFieldsEnsureStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::patch::RefFieldsEnsureStruct>>::operator()(
    const ::test::fixtures::patch::RefFieldsEnsureStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::patch::RefFieldsEnsureStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::patch::MyEnum>
Extractor<::test::fixtures::patch::MyEnum>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::patch::MyEnum>(
        "Error getting python int value: MyEnum");
  }
  return static_cast<::test::fixtures::patch::MyEnum>(val);
}

int Extractor<::test::fixtures::patch::MyEnum>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.patch.module import error");
  }
  int result =
      can_extract__test__fixtures__patch__module__MyEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyEnum");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::patch::MyEnum>::operator()(
    ::test::fixtures::patch::MyEnum val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__patch__module__MyEnum(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
