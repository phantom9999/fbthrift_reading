/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.patch;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class RefFieldsFieldPatch implements TBase, java.io.Serializable, Cloneable, Comparable<RefFieldsFieldPatch> {
  private static final TStruct STRUCT_DESC = new TStruct("RefFieldsFieldPatch");
  private static final TField UNIQUE_FIELD_DESC = new TField("unique", TType.STRUCT, (short)1);
  private static final TField OPT_UNIQUE_FIELD_DESC = new TField("opt_unique", TType.STRUCT, (short)4);
  private static final TField OPT_BOX_FIELD_DESC = new TField("opt_box", TType.STRUCT, (short)7);

  public RefFieldsField1Patch unique;
  public RefFieldsField4Patch opt_unique;
  public RefFieldsField7Patch opt_box;
  public static final int UNIQUE = 1;
  public static final int OPT_UNIQUE = 4;
  public static final int OPT_BOX = 7;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(UNIQUE, new FieldMetaData("unique", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, RefFieldsField1Patch.class)));
    tmpMetaDataMap.put(OPT_UNIQUE, new FieldMetaData("opt_unique", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, RefFieldsField4Patch.class)));
    tmpMetaDataMap.put(OPT_BOX, new FieldMetaData("opt_box", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, RefFieldsField7Patch.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(RefFieldsFieldPatch.class, metaDataMap);
  }

  public RefFieldsFieldPatch() {
  }

  public RefFieldsFieldPatch(
      RefFieldsField1Patch unique,
      RefFieldsField4Patch opt_unique,
      RefFieldsField7Patch opt_box) {
    this();
    this.unique = unique;
    this.opt_unique = opt_unique;
    this.opt_box = opt_box;
  }

  public static class Builder {
    private RefFieldsField1Patch unique;
    private RefFieldsField4Patch opt_unique;
    private RefFieldsField7Patch opt_box;

    public Builder() {
    }

    public Builder setUnique(final RefFieldsField1Patch unique) {
      this.unique = unique;
      return this;
    }

    public Builder setOpt_unique(final RefFieldsField4Patch opt_unique) {
      this.opt_unique = opt_unique;
      return this;
    }

    public Builder setOpt_box(final RefFieldsField7Patch opt_box) {
      this.opt_box = opt_box;
      return this;
    }

    public RefFieldsFieldPatch build() {
      RefFieldsFieldPatch result = new RefFieldsFieldPatch();
      result.setUnique(this.unique);
      result.setOpt_unique(this.opt_unique);
      result.setOpt_box(this.opt_box);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefFieldsFieldPatch(RefFieldsFieldPatch other) {
    if (other.isSetUnique()) {
      this.unique = TBaseHelper.deepCopy(other.unique);
    }
    if (other.isSetOpt_unique()) {
      this.opt_unique = TBaseHelper.deepCopy(other.opt_unique);
    }
    if (other.isSetOpt_box()) {
      this.opt_box = TBaseHelper.deepCopy(other.opt_box);
    }
  }

  public RefFieldsFieldPatch deepCopy() {
    return new RefFieldsFieldPatch(this);
  }

  public RefFieldsField1Patch getUnique() {
    return this.unique;
  }

  public RefFieldsFieldPatch setUnique(RefFieldsField1Patch unique) {
    this.unique = unique;
    return this;
  }

  public void unsetUnique() {
    this.unique = null;
  }

  // Returns true if field unique is set (has been assigned a value) and false otherwise
  public boolean isSetUnique() {
    return this.unique != null;
  }

  public void setUniqueIsSet(boolean __value) {
    if (!__value) {
      this.unique = null;
    }
  }

  public RefFieldsField4Patch getOpt_unique() {
    return this.opt_unique;
  }

  public RefFieldsFieldPatch setOpt_unique(RefFieldsField4Patch opt_unique) {
    this.opt_unique = opt_unique;
    return this;
  }

  public void unsetOpt_unique() {
    this.opt_unique = null;
  }

  // Returns true if field opt_unique is set (has been assigned a value) and false otherwise
  public boolean isSetOpt_unique() {
    return this.opt_unique != null;
  }

  public void setOpt_uniqueIsSet(boolean __value) {
    if (!__value) {
      this.opt_unique = null;
    }
  }

  public RefFieldsField7Patch getOpt_box() {
    return this.opt_box;
  }

  public RefFieldsFieldPatch setOpt_box(RefFieldsField7Patch opt_box) {
    this.opt_box = opt_box;
    return this;
  }

  public void unsetOpt_box() {
    this.opt_box = null;
  }

  // Returns true if field opt_box is set (has been assigned a value) and false otherwise
  public boolean isSetOpt_box() {
    return this.opt_box != null;
  }

  public void setOpt_boxIsSet(boolean __value) {
    if (!__value) {
      this.opt_box = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case UNIQUE:
      if (__value == null) {
        unsetUnique();
      } else {
        setUnique((RefFieldsField1Patch)__value);
      }
      break;

    case OPT_UNIQUE:
      if (__value == null) {
        unsetOpt_unique();
      } else {
        setOpt_unique((RefFieldsField4Patch)__value);
      }
      break;

    case OPT_BOX:
      if (__value == null) {
        unsetOpt_box();
      } else {
        setOpt_box((RefFieldsField7Patch)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case UNIQUE:
      return getUnique();

    case OPT_UNIQUE:
      return getOpt_unique();

    case OPT_BOX:
      return getOpt_box();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof RefFieldsFieldPatch))
      return false;
    RefFieldsFieldPatch that = (RefFieldsFieldPatch)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetUnique(), that.isSetUnique(), this.unique, that.unique)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOpt_unique(), that.isSetOpt_unique(), this.opt_unique, that.opt_unique)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOpt_box(), that.isSetOpt_box(), this.opt_box, that.opt_box)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {unique, opt_unique, opt_box});
  }

  @Override
  public int compareTo(RefFieldsFieldPatch other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUnique()).compareTo(other.isSetUnique());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(unique, other.unique);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOpt_unique()).compareTo(other.isSetOpt_unique());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(opt_unique, other.opt_unique);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOpt_box()).compareTo(other.isSetOpt_box());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(opt_box, other.opt_box);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case UNIQUE:
          if (__field.type == TType.STRUCT) {
            this.unique = new RefFieldsField1Patch();
            this.unique.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPT_UNIQUE:
          if (__field.type == TType.STRUCT) {
            this.opt_unique = new RefFieldsField4Patch();
            this.opt_unique.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPT_BOX:
          if (__field.type == TType.STRUCT) {
            this.opt_box = new RefFieldsField7Patch();
            this.opt_box.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.unique != null) {
      oprot.writeFieldBegin(UNIQUE_FIELD_DESC);
      this.unique.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.opt_unique != null) {
      oprot.writeFieldBegin(OPT_UNIQUE_FIELD_DESC);
      this.opt_unique.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.opt_box != null) {
      oprot.writeFieldBegin(OPT_BOX_FIELD_DESC);
      this.opt_box.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("RefFieldsFieldPatch");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("unique");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUnique() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getUnique(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("opt_unique");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getOpt_unique() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getOpt_unique(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("opt_box");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getOpt_box() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getOpt_box(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

