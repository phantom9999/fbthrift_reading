/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.patch;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import javax.annotation.Nullable;
import org.apache.thrift.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@com.facebook.swift.codec.ThriftStruct(value="RefFieldsEnsureStruct", builder=RefFieldsEnsureStruct.Builder.class)
public final class RefFieldsEnsureStruct implements com.facebook.thrift.payload.ThriftSerializable {
    @ThriftConstructor
    public RefFieldsEnsureStruct(
        @com.facebook.swift.codec.ThriftField(value=1, name="unique", requiredness=Requiredness.OPTIONAL) final List<Integer> unique,
        @com.facebook.swift.codec.ThriftField(value=2, name="shared_const", requiredness=Requiredness.OPTIONAL) final List<Integer> sharedConst,
        @com.facebook.swift.codec.ThriftField(value=3, name="shared_mustable", requiredness=Requiredness.OPTIONAL) final List<Integer> sharedMustable,
        @com.facebook.swift.codec.ThriftField(value=4, name="opt_unique", requiredness=Requiredness.OPTIONAL) final List<Integer> optUnique,
        @com.facebook.swift.codec.ThriftField(value=5, name="opt_shared_const", requiredness=Requiredness.OPTIONAL) final List<Integer> optSharedConst,
        @com.facebook.swift.codec.ThriftField(value=6, name="opt_shared_mustable", requiredness=Requiredness.OPTIONAL) final List<Integer> optSharedMustable,
        @com.facebook.swift.codec.ThriftField(value=7, name="opt_box", requiredness=Requiredness.OPTIONAL) final List<Integer> optBox
    ) {
        this.unique = unique;
        this.sharedConst = sharedConst;
        this.sharedMustable = sharedMustable;
        this.optUnique = optUnique;
        this.optSharedConst = optSharedConst;
        this.optSharedMustable = optSharedMustable;
        this.optBox = optBox;
    }
    
    @ThriftConstructor
    protected RefFieldsEnsureStruct() {
      this.unique = null;
      this.sharedConst = null;
      this.sharedMustable = null;
      this.optUnique = null;
      this.optSharedConst = null;
      this.optSharedMustable = null;
      this.optBox = null;
    }
    
    public static class Builder {
        private List<Integer> unique = null;
        private List<Integer> sharedConst = null;
        private List<Integer> sharedMustable = null;
        private List<Integer> optUnique = null;
        private List<Integer> optSharedConst = null;
        private List<Integer> optSharedMustable = null;
        private List<Integer> optBox = null;
    
        @com.facebook.swift.codec.ThriftField(value=1, name="unique", requiredness=Requiredness.OPTIONAL)
        public Builder setUnique(List<Integer> unique) {
            this.unique = unique;
            return this;
        }
    
        public List<Integer> getUnique() { return unique; }
    
            @com.facebook.swift.codec.ThriftField(value=2, name="shared_const", requiredness=Requiredness.OPTIONAL)
        public Builder setSharedConst(List<Integer> sharedConst) {
            this.sharedConst = sharedConst;
            return this;
        }
    
        public List<Integer> getSharedConst() { return sharedConst; }
    
            @com.facebook.swift.codec.ThriftField(value=3, name="shared_mustable", requiredness=Requiredness.OPTIONAL)
        public Builder setSharedMustable(List<Integer> sharedMustable) {
            this.sharedMustable = sharedMustable;
            return this;
        }
    
        public List<Integer> getSharedMustable() { return sharedMustable; }
    
            @com.facebook.swift.codec.ThriftField(value=4, name="opt_unique", requiredness=Requiredness.OPTIONAL)
        public Builder setOptUnique(List<Integer> optUnique) {
            this.optUnique = optUnique;
            return this;
        }
    
        public List<Integer> getOptUnique() { return optUnique; }
    
            @com.facebook.swift.codec.ThriftField(value=5, name="opt_shared_const", requiredness=Requiredness.OPTIONAL)
        public Builder setOptSharedConst(List<Integer> optSharedConst) {
            this.optSharedConst = optSharedConst;
            return this;
        }
    
        public List<Integer> getOptSharedConst() { return optSharedConst; }
    
            @com.facebook.swift.codec.ThriftField(value=6, name="opt_shared_mustable", requiredness=Requiredness.OPTIONAL)
        public Builder setOptSharedMustable(List<Integer> optSharedMustable) {
            this.optSharedMustable = optSharedMustable;
            return this;
        }
    
        public List<Integer> getOptSharedMustable() { return optSharedMustable; }
    
            @com.facebook.swift.codec.ThriftField(value=7, name="opt_box", requiredness=Requiredness.OPTIONAL)
        public Builder setOptBox(List<Integer> optBox) {
            this.optBox = optBox;
            return this;
        }
    
        public List<Integer> getOptBox() { return optBox; }
    
        public Builder() { }
        public Builder(RefFieldsEnsureStruct other) {
            this.unique = other.unique;
            this.sharedConst = other.sharedConst;
            this.sharedMustable = other.sharedMustable;
            this.optUnique = other.optUnique;
            this.optSharedConst = other.optSharedConst;
            this.optSharedMustable = other.optSharedMustable;
            this.optBox = other.optBox;
        }
    
        @ThriftConstructor
        public RefFieldsEnsureStruct build() {
            RefFieldsEnsureStruct result = new RefFieldsEnsureStruct (
                this.unique,
                this.sharedConst,
                this.sharedMustable,
                this.optUnique,
                this.optSharedConst,
                this.optSharedMustable,
                this.optBox
            );
            return result;
        }
    }
        
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap();
    public static final Map<String, Integer> THRIFT_NAMES_TO_IDS = new HashMap();
    public static final Map<Integer, TField> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("RefFieldsEnsureStruct");
    private final List<Integer> unique;
    public static final int _UNIQUE = 1;
    private static final TField UNIQUE_FIELD_DESC = new TField("unique", TType.LIST, (short)1);
        private final List<Integer> sharedConst;
    public static final int _SHARED_CONST = 2;
    private static final TField SHARED_CONST_FIELD_DESC = new TField("shared_const", TType.LIST, (short)2);
        private final List<Integer> sharedMustable;
    public static final int _SHARED_MUSTABLE = 3;
    private static final TField SHARED_MUSTABLE_FIELD_DESC = new TField("shared_mustable", TType.LIST, (short)3);
        private final List<Integer> optUnique;
    public static final int _OPT_UNIQUE = 4;
    private static final TField OPT_UNIQUE_FIELD_DESC = new TField("opt_unique", TType.LIST, (short)4);
        private final List<Integer> optSharedConst;
    public static final int _OPT_SHARED_CONST = 5;
    private static final TField OPT_SHARED_CONST_FIELD_DESC = new TField("opt_shared_const", TType.LIST, (short)5);
        private final List<Integer> optSharedMustable;
    public static final int _OPT_SHARED_MUSTABLE = 6;
    private static final TField OPT_SHARED_MUSTABLE_FIELD_DESC = new TField("opt_shared_mustable", TType.LIST, (short)6);
        private final List<Integer> optBox;
    public static final int _OPT_BOX = 7;
    private static final TField OPT_BOX_FIELD_DESC = new TField("opt_box", TType.LIST, (short)7);
    static {
      NAMES_TO_IDS.put("unique", 1);
      THRIFT_NAMES_TO_IDS.put("unique", 1);
      FIELD_METADATA.put(1, UNIQUE_FIELD_DESC);
      NAMES_TO_IDS.put("sharedConst", 2);
      THRIFT_NAMES_TO_IDS.put("shared_const", 2);
      FIELD_METADATA.put(2, SHARED_CONST_FIELD_DESC);
      NAMES_TO_IDS.put("sharedMustable", 3);
      THRIFT_NAMES_TO_IDS.put("shared_mustable", 3);
      FIELD_METADATA.put(3, SHARED_MUSTABLE_FIELD_DESC);
      NAMES_TO_IDS.put("optUnique", 4);
      THRIFT_NAMES_TO_IDS.put("opt_unique", 4);
      FIELD_METADATA.put(4, OPT_UNIQUE_FIELD_DESC);
      NAMES_TO_IDS.put("optSharedConst", 5);
      THRIFT_NAMES_TO_IDS.put("opt_shared_const", 5);
      FIELD_METADATA.put(5, OPT_SHARED_CONST_FIELD_DESC);
      NAMES_TO_IDS.put("optSharedMustable", 6);
      THRIFT_NAMES_TO_IDS.put("opt_shared_mustable", 6);
      FIELD_METADATA.put(6, OPT_SHARED_MUSTABLE_FIELD_DESC);
      NAMES_TO_IDS.put("optBox", 7);
      THRIFT_NAMES_TO_IDS.put("opt_box", 7);
      FIELD_METADATA.put(7, OPT_BOX_FIELD_DESC);
      com.facebook.thrift.type.TypeRegistry.add(new com.facebook.thrift.type.Type(
        new com.facebook.thrift.type.UniversalName("test.dev/fixtures/patch/RefFieldsEnsureStruct"),
        RefFieldsEnsureStruct.class, RefFieldsEnsureStruct::read0));
    }
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=1, name="unique", requiredness=Requiredness.OPTIONAL)
    public List<Integer> getUnique() { return unique; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=2, name="shared_const", requiredness=Requiredness.OPTIONAL)
    public List<Integer> getSharedConst() { return sharedConst; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=3, name="shared_mustable", requiredness=Requiredness.OPTIONAL)
    public List<Integer> getSharedMustable() { return sharedMustable; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=4, name="opt_unique", requiredness=Requiredness.OPTIONAL)
    public List<Integer> getOptUnique() { return optUnique; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=5, name="opt_shared_const", requiredness=Requiredness.OPTIONAL)
    public List<Integer> getOptSharedConst() { return optSharedConst; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=6, name="opt_shared_mustable", requiredness=Requiredness.OPTIONAL)
    public List<Integer> getOptSharedMustable() { return optSharedMustable; }
    
    
    @Nullable
    @com.facebook.swift.codec.ThriftField(value=7, name="opt_box", requiredness=Requiredness.OPTIONAL)
    public List<Integer> getOptBox() { return optBox; }
    
    @java.lang.Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("unique", unique);
        helper.add("sharedConst", sharedConst);
        helper.add("sharedMustable", sharedMustable);
        helper.add("optUnique", optUnique);
        helper.add("optSharedConst", optSharedConst);
        helper.add("optSharedMustable", optSharedMustable);
        helper.add("optBox", optBox);
        return helper.toString();
    }
    
    @java.lang.Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        RefFieldsEnsureStruct other = (RefFieldsEnsureStruct)o;
    
        return
            Objects.equals(unique, other.unique) &&
            Objects.equals(sharedConst, other.sharedConst) &&
            Objects.equals(sharedMustable, other.sharedMustable) &&
            Objects.equals(optUnique, other.optUnique) &&
            Objects.equals(optSharedConst, other.optSharedConst) &&
            Objects.equals(optSharedMustable, other.optSharedMustable) &&
            Objects.equals(optBox, other.optBox) &&
            true;
    }
    
    @java.lang.Override
    public int hashCode() {
        return Arrays.deepHashCode(new java.lang.Object[] {
            unique,
            sharedConst,
            sharedMustable,
            optUnique,
            optSharedConst,
            optSharedMustable,
            optBox
        });
    }
    
    
    public static com.facebook.thrift.payload.Reader<RefFieldsEnsureStruct> asReader() {
      return RefFieldsEnsureStruct::read0;
    }
    
    public static RefFieldsEnsureStruct read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(RefFieldsEnsureStruct.NAMES_TO_IDS, RefFieldsEnsureStruct.THRIFT_NAMES_TO_IDS, RefFieldsEnsureStruct.FIELD_METADATA);
      RefFieldsEnsureStruct.Builder builder = new RefFieldsEnsureStruct.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _UNIQUE:
          if (__field.type == TType.LIST) {
            List<Integer> unique;
            {
            TList _list = oprot.readListBegin();
            unique = new ArrayList<Integer>(Math.max(0, _list.size));
            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                
                int _value1 = oprot.readI32();
                unique.add(_value1);
            }
            oprot.readListEnd();
            }
            builder.setUnique(unique);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SHARED_CONST:
          if (__field.type == TType.LIST) {
            List<Integer> sharedConst;
            {
            TList _list = oprot.readListBegin();
            sharedConst = new ArrayList<Integer>(Math.max(0, _list.size));
            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                
                int _value1 = oprot.readI32();
                sharedConst.add(_value1);
            }
            oprot.readListEnd();
            }
            builder.setSharedConst(sharedConst);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _SHARED_MUSTABLE:
          if (__field.type == TType.LIST) {
            List<Integer> sharedMustable;
            {
            TList _list = oprot.readListBegin();
            sharedMustable = new ArrayList<Integer>(Math.max(0, _list.size));
            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                
                int _value1 = oprot.readI32();
                sharedMustable.add(_value1);
            }
            oprot.readListEnd();
            }
            builder.setSharedMustable(sharedMustable);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPT_UNIQUE:
          if (__field.type == TType.LIST) {
            List<Integer> optUnique;
            {
            TList _list = oprot.readListBegin();
            optUnique = new ArrayList<Integer>(Math.max(0, _list.size));
            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                
                int _value1 = oprot.readI32();
                optUnique.add(_value1);
            }
            oprot.readListEnd();
            }
            builder.setOptUnique(optUnique);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPT_SHARED_CONST:
          if (__field.type == TType.LIST) {
            List<Integer> optSharedConst;
            {
            TList _list = oprot.readListBegin();
            optSharedConst = new ArrayList<Integer>(Math.max(0, _list.size));
            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                
                int _value1 = oprot.readI32();
                optSharedConst.add(_value1);
            }
            oprot.readListEnd();
            }
            builder.setOptSharedConst(optSharedConst);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPT_SHARED_MUSTABLE:
          if (__field.type == TType.LIST) {
            List<Integer> optSharedMustable;
            {
            TList _list = oprot.readListBegin();
            optSharedMustable = new ArrayList<Integer>(Math.max(0, _list.size));
            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                
                int _value1 = oprot.readI32();
                optSharedMustable.add(_value1);
            }
            oprot.readListEnd();
            }
            builder.setOptSharedMustable(optSharedMustable);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _OPT_BOX:
          if (__field.type == TType.LIST) {
            List<Integer> optBox;
            {
            TList _list = oprot.readListBegin();
            optBox = new ArrayList<Integer>(Math.max(0, _list.size));
            for (int _i = 0; (_list.size < 0) ? oprot.peekList() : (_i < _list.size); _i++) {
                
                int _value1 = oprot.readI32();
                optBox.add(_value1);
            }
            oprot.readListEnd();
            }
            builder.setOptBox(optBox);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (unique != null) {
        oprot.writeFieldBegin(UNIQUE_FIELD_DESC);
        List<Integer> _iter0 = unique;
        oprot.writeListBegin(new TList(TType.I32, _iter0.size()));
        for (int _iter1 : _iter0) {
          oprot.writeI32(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (sharedConst != null) {
        oprot.writeFieldBegin(SHARED_CONST_FIELD_DESC);
        List<Integer> _iter0 = sharedConst;
        oprot.writeListBegin(new TList(TType.I32, _iter0.size()));
        for (int _iter1 : _iter0) {
          oprot.writeI32(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (sharedMustable != null) {
        oprot.writeFieldBegin(SHARED_MUSTABLE_FIELD_DESC);
        List<Integer> _iter0 = sharedMustable;
        oprot.writeListBegin(new TList(TType.I32, _iter0.size()));
        for (int _iter1 : _iter0) {
          oprot.writeI32(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (optUnique != null) {
        oprot.writeFieldBegin(OPT_UNIQUE_FIELD_DESC);
        List<Integer> _iter0 = optUnique;
        oprot.writeListBegin(new TList(TType.I32, _iter0.size()));
        for (int _iter1 : _iter0) {
          oprot.writeI32(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (optSharedConst != null) {
        oprot.writeFieldBegin(OPT_SHARED_CONST_FIELD_DESC);
        List<Integer> _iter0 = optSharedConst;
        oprot.writeListBegin(new TList(TType.I32, _iter0.size()));
        for (int _iter1 : _iter0) {
          oprot.writeI32(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (optSharedMustable != null) {
        oprot.writeFieldBegin(OPT_SHARED_MUSTABLE_FIELD_DESC);
        List<Integer> _iter0 = optSharedMustable;
        oprot.writeListBegin(new TList(TType.I32, _iter0.size()));
        for (int _iter1 : _iter0) {
          oprot.writeI32(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      if (optBox != null) {
        oprot.writeFieldBegin(OPT_BOX_FIELD_DESC);
        List<Integer> _iter0 = optBox;
        oprot.writeListBegin(new TList(TType.I32, _iter0.size()));
        for (int _iter1 : _iter0) {
          oprot.writeI32(_iter1);
        }
        oprot.writeListEnd();
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
    private static class _RefFieldsEnsureStructLazy {
        private static final RefFieldsEnsureStruct _DEFAULT = new RefFieldsEnsureStruct.Builder().build();
    }
    
    public static RefFieldsEnsureStruct defaultInstance() {
        return  _RefFieldsEnsureStructLazy._DEFAULT;
    }
}
