#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

import apache.thrift.metadata.thrift_types as _fbthrift_metadata


# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_struct__fbthrift_unadapted_AnnotationWithContainers(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "with_containers._fbthrift_unadapted_AnnotationWithContainers"

    if qualified_name in metadata_struct.structs:
        return metadata_struct
    fields = [
        _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_list=_fbthrift_metadata.ThriftListType(valueType=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_STRING_TYPE))), name="names", is_optional=False, structured_annotations=[
        ]),
        _fbthrift_metadata.ThriftField(id=2, type=_fbthrift_metadata.ThriftType(t_map=_fbthrift_metadata.ThriftMapType(keyType=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_STRING_TYPE),valueType=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_I32_TYPE))), name="counts", is_optional=False, structured_annotations=[
        ]),
    ]
    struct_dict = dict(metadata_struct.structs)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftStruct(name=qualified_name, fields=fields,
        is_union=False,
        structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="python.Adapter"), fields= { "name": _fbthrift_metadata.ThriftConstValue(cv_string="my.Adapter"), "typeHint": _fbthrift_metadata.ThriftConstValue(cv_string="my.AdaptedType[]"),  }),
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="scope.Transitive"), fields= {  }),
        ])
    new_struct = metadata_struct(structs=struct_dict)

     # names
     # key
     # val  # counts

    return new_struct
def gen_metadata_struct__fbthrift_unadapted_AnnotationWithContainers() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_struct__fbthrift_unadapted_AnnotationWithContainers(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))

# TODO (ffrancet): This general pattern can be optimized by using tuples and dicts
# instead of re-generating thrift structs
def _fbthrift_gen_metadata_struct__fbthrift_unadapted_MyStruct(metadata_struct: _fbthrift_metadata.ThriftMetadata) -> _fbthrift_metadata.ThriftMetadata:
    qualified_name = "with_containers._fbthrift_unadapted_MyStruct"

    if qualified_name in metadata_struct.structs:
        return metadata_struct
    fields = [
        _fbthrift_metadata.ThriftField(id=1, type=_fbthrift_metadata.ThriftType(t_primitive=_fbthrift_metadata.ThriftPrimitiveType.THRIFT_I32_TYPE), name="abc", is_optional=False, structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="with_containers._fbthrift_unadapted_AnnotationWithContainers"), fields= { "names": _fbthrift_metadata.ThriftConstValue(cv_list=[_fbthrift_metadata.ThriftConstValue(cv_string="bar"), _fbthrift_metadata.ThriftConstValue(cv_string="baz"), ]), "counts": _fbthrift_metadata.ThriftConstValue(cv_map=[_fbthrift_metadata.ThriftConstValuePair(key=_fbthrift_metadata.ThriftConstValue(cv_string="c"), value=_fbthrift_metadata.ThriftConstValue(cv_integer=3)), ]),  }),
        ]),
    ]
    struct_dict = dict(metadata_struct.structs)
    struct_dict[qualified_name] = _fbthrift_metadata.ThriftStruct(name=qualified_name, fields=fields,
        is_union=False,
        structured_annotations=[
            _fbthrift_metadata.ThriftConstStruct(type=_fbthrift_metadata.ThriftStructType(name="with_containers._fbthrift_unadapted_AnnotationWithContainers"), fields= { "names": _fbthrift_metadata.ThriftConstValue(cv_list=[_fbthrift_metadata.ThriftConstValue(cv_string="foo"), _fbthrift_metadata.ThriftConstValue(cv_string="bar"), ]), "counts": _fbthrift_metadata.ThriftConstValue(cv_map=[_fbthrift_metadata.ThriftConstValuePair(key=_fbthrift_metadata.ThriftConstValue(cv_string="a"), value=_fbthrift_metadata.ThriftConstValue(cv_integer=1)), _fbthrift_metadata.ThriftConstValuePair(key=_fbthrift_metadata.ThriftConstValue(cv_string="b"), value=_fbthrift_metadata.ThriftConstValue(cv_integer=2)), ]),  }),
        ])
    new_struct = metadata_struct(structs=struct_dict)

     # abc

    return new_struct
def gen_metadata_struct__fbthrift_unadapted_MyStruct() -> _fbthrift_metadata.ThriftMetadata:
    return _fbthrift_gen_metadata_struct__fbthrift_unadapted_MyStruct(_fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={}))




def getThriftModuleMetadata() -> _fbthrift_metadata.ThriftMetadata:
    meta = _fbthrift_metadata.ThriftMetadata(structs={}, enums={}, exceptions={}, services={})
    meta = _fbthrift_gen_metadata_struct__fbthrift_unadapted_AnnotationWithContainers(meta)
    meta = _fbthrift_gen_metadata_struct__fbthrift_unadapted_MyStruct(meta)
    return meta
