// @generated by Thrift for thrift/compiler/test/fixtures/adapter/src/module.thrift
// This file is probably not the place you want to edit!

//! Thrift error definitions for `module`.

/// Error definitions for `Service`.
pub mod service {

    pub type FuncError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::service::FuncExn> for
        ::std::result::Result<crate::types::MyI32_4873, FuncError>
    {
        fn from(e: crate::services::service::FuncExn) -> Self {
            match e {
                crate::services::service::FuncExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::service::FuncExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(FuncError::ApplicationException(aexn)),
            }
        }
    }

}

/// Error definitions for `AdapterService`.
pub mod adapter_service {

    pub type CountError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::adapter_service::CountExn> for
        ::std::result::Result<crate::types::CountingStruct, CountError>
    {
        fn from(e: crate::services::adapter_service::CountExn) -> Self {
            match e {
                crate::services::adapter_service::CountExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::adapter_service::CountExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(CountError::ApplicationException(aexn)),
            }
        }
    }

    pub type AdaptedTypesError = ::fbthrift::NonthrowingFunctionError;

    impl ::std::convert::From<crate::services::adapter_service::AdaptedTypesExn> for
        ::std::result::Result<crate::types::HeapAllocated, AdaptedTypesError>
    {
        fn from(e: crate::services::adapter_service::AdaptedTypesExn) -> Self {
            match e {
                crate::services::adapter_service::AdaptedTypesExn::Success(res) => {
                    ::std::result::Result::Ok(res)
                }
                crate::services::adapter_service::AdaptedTypesExn::ApplicationException(aexn) =>
                    ::std::result::Result::Err(AdaptedTypesError::ApplicationException(aexn)),
            }
        }
    }

}

