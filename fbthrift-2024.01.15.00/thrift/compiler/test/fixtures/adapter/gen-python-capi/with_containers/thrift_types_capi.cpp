
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/adapter/src/gen-python-capi/with_containers/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/adapter/src/gen-python-capi/with_containers/thrift_types_capi.h>


namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_with_containers__thrift_types_capi));
  return import();
}
  static constexpr std::int16_t _fbthrift__AnnotationWithContainers__tuple_pos[2] = {
    1, 2
  };
  static constexpr std::int16_t _fbthrift__MyStruct__tuple_pos[1] = {
    1
  };
} // namespace

ExtractorResult<::cpp2::AnnotationWithContainers>
Extractor<::cpp2::AnnotationWithContainers>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a AnnotationWithContainers");
      }
      return extractorError<::cpp2::AnnotationWithContainers>(
          "Marshal error: AnnotationWithContainers");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::cpp2::AnnotationWithContainers>>{}(*fbThriftData);
}

ExtractorResult<::cpp2::AnnotationWithContainers>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::AnnotationWithContainers>>::operator()(PyObject* fbThriftData) {
  ::cpp2::AnnotationWithContainers cpp;
  std::optional<std::string_view> error;
  Extractor<list<Bytes>>{}.extractInto(
      cpp.names_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AnnotationWithContainers__tuple_pos[0]),
      error);
  Extractor<map<Bytes, int32_t>>{}.extractInto(
      cpp.counts_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__AnnotationWithContainers__tuple_pos[1]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::cpp2::AnnotationWithContainers>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module with_containers import error");
  }
  int result =
      can_extract__with_containers__AnnotationWithContainers(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AnnotationWithContainers");
  }
  return result;
}


PyObject* Constructor<::cpp2::AnnotationWithContainers>::operator()(
    const ::cpp2::AnnotationWithContainers& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::AnnotationWithContainers>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__with_containers__AnnotationWithContainers(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::AnnotationWithContainers>>::operator()(
    FOLLY_MAYBE_UNUSED const ::cpp2::AnnotationWithContainers& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__names(
    Constructor<list<Bytes>>{}
    .constructFrom(val.names_ref()));
  if (!_fbthrift__names ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AnnotationWithContainers__tuple_pos[0],
          *_fbthrift__names) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__counts(
    Constructor<map<Bytes, int32_t>>{}
    .constructFrom(val.counts_ref()));
  if (!_fbthrift__counts ||
      setStructField(
          *fbthrift_data,
          _fbthrift__AnnotationWithContainers__tuple_pos[1],
          *_fbthrift__counts) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::cpp2::MyStruct>
Extractor<::cpp2::MyStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyStruct");
      }
      return extractorError<::cpp2::MyStruct>(
          "Marshal error: MyStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::cpp2::MyStruct>>{}(*fbThriftData);
}

ExtractorResult<::cpp2::MyStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::MyStruct>>::operator()(PyObject* fbThriftData) {
  ::cpp2::MyStruct cpp;
  std::optional<std::string_view> error;
  Extractor<int32_t>{}.extractInto(
      cpp.abc_ref(),
      PyTuple_GET_ITEM(fbThriftData, _fbthrift__MyStruct__tuple_pos[0]),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::cpp2::MyStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module with_containers import error");
  }
  int result =
      can_extract__with_containers__MyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStruct");
  }
  return result;
}


PyObject* Constructor<::cpp2::MyStruct>::operator()(
    const ::cpp2::MyStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__with_containers__MyStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct>>::operator()(
    FOLLY_MAYBE_UNUSED const ::cpp2::MyStruct& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__abc(
    Constructor<int32_t>{}
    .constructFrom(val.abc_ref()));
  if (!_fbthrift__abc ||
      setStructField(
          *fbthrift_data,
          _fbthrift__MyStruct__tuple_pos[0],
          *_fbthrift__abc) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
