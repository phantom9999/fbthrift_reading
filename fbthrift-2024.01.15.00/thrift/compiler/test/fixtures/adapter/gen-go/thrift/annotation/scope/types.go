// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package scope // [[[ program thrift source path ]]]

import (
    "fmt"
    "strings"

    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = strings.Split
var _ = thrift.ZERO


type Transitive struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Transitive{}

func NewTransitive() *Transitive {
    return (&Transitive{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewTransitive().Set<FieldNameFoo>().Set<FieldNameBar>()
type TransitiveBuilder struct {
    obj *Transitive
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewTransitive().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewTransitiveBuilder() *TransitiveBuilder {
    return &TransitiveBuilder{
        obj: NewTransitive(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewTransitive().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *TransitiveBuilder) Emit() *Transitive {
    var objCopy Transitive = *x.obj
    return &objCopy
}

func (x *Transitive) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Transitive"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Transitive) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Transitive) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Transitive({")
    sb.WriteString("})")

    return sb.String()
}

type Program struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Program{}

func NewProgram() *Program {
    return (&Program{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewProgram().Set<FieldNameFoo>().Set<FieldNameBar>()
type ProgramBuilder struct {
    obj *Program
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewProgram().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewProgramBuilder() *ProgramBuilder {
    return &ProgramBuilder{
        obj: NewProgram(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewProgram().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ProgramBuilder) Emit() *Program {
    var objCopy Program = *x.obj
    return &objCopy
}

func (x *Program) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Program"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Program) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Program) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Program({")
    sb.WriteString("})")

    return sb.String()
}

type Struct struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Struct{}

func NewStruct() *Struct {
    return (&Struct{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
type StructBuilder struct {
    obj *Struct
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewStructBuilder() *StructBuilder {
    return &StructBuilder{
        obj: NewStruct(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewStruct().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *StructBuilder) Emit() *Struct {
    var objCopy Struct = *x.obj
    return &objCopy
}

func (x *Struct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Struct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Struct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Struct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Struct({")
    sb.WriteString("})")

    return sb.String()
}

type Union struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Union{}

func NewUnion() *Union {
    return (&Union{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewUnion().Set<FieldNameFoo>().Set<FieldNameBar>()
type UnionBuilder struct {
    obj *Union
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewUnion().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewUnionBuilder() *UnionBuilder {
    return &UnionBuilder{
        obj: NewUnion(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewUnion().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *UnionBuilder) Emit() *Union {
    var objCopy Union = *x.obj
    return &objCopy
}

func (x *Union) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Union"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Union) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Union) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Union({")
    sb.WriteString("})")

    return sb.String()
}

type Exception struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Exception{}

func NewException() *Exception {
    return (&Exception{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewException().Set<FieldNameFoo>().Set<FieldNameBar>()
type ExceptionBuilder struct {
    obj *Exception
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewException().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewExceptionBuilder() *ExceptionBuilder {
    return &ExceptionBuilder{
        obj: NewException(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewException().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ExceptionBuilder) Emit() *Exception {
    var objCopy Exception = *x.obj
    return &objCopy
}

func (x *Exception) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Exception"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Exception) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Exception) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Exception({")
    sb.WriteString("})")

    return sb.String()
}

type Field struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Field{}

func NewField() *Field {
    return (&Field{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewField().Set<FieldNameFoo>().Set<FieldNameBar>()
type FieldBuilder struct {
    obj *Field
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewField().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewFieldBuilder() *FieldBuilder {
    return &FieldBuilder{
        obj: NewField(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewField().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *FieldBuilder) Emit() *Field {
    var objCopy Field = *x.obj
    return &objCopy
}

func (x *Field) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Field"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Field) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Field) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Field({")
    sb.WriteString("})")

    return sb.String()
}

type Typedef struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Typedef{}

func NewTypedef() *Typedef {
    return (&Typedef{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewTypedef().Set<FieldNameFoo>().Set<FieldNameBar>()
type TypedefBuilder struct {
    obj *Typedef
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewTypedef().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewTypedefBuilder() *TypedefBuilder {
    return &TypedefBuilder{
        obj: NewTypedef(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewTypedef().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *TypedefBuilder) Emit() *Typedef {
    var objCopy Typedef = *x.obj
    return &objCopy
}

func (x *Typedef) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Typedef"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Typedef) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Typedef) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Typedef({")
    sb.WriteString("})")

    return sb.String()
}

type Service struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Service{}

func NewService() *Service {
    return (&Service{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewService().Set<FieldNameFoo>().Set<FieldNameBar>()
type ServiceBuilder struct {
    obj *Service
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewService().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewServiceBuilder() *ServiceBuilder {
    return &ServiceBuilder{
        obj: NewService(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewService().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ServiceBuilder) Emit() *Service {
    var objCopy Service = *x.obj
    return &objCopy
}

func (x *Service) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Service"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Service) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Service) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Service({")
    sb.WriteString("})")

    return sb.String()
}

type Interaction struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Interaction{}

func NewInteraction() *Interaction {
    return (&Interaction{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewInteraction().Set<FieldNameFoo>().Set<FieldNameBar>()
type InteractionBuilder struct {
    obj *Interaction
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewInteraction().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewInteractionBuilder() *InteractionBuilder {
    return &InteractionBuilder{
        obj: NewInteraction(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewInteraction().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *InteractionBuilder) Emit() *Interaction {
    var objCopy Interaction = *x.obj
    return &objCopy
}

func (x *Interaction) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Interaction"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Interaction) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Interaction) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Interaction({")
    sb.WriteString("})")

    return sb.String()
}

type Function struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Function{}

func NewFunction() *Function {
    return (&Function{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewFunction().Set<FieldNameFoo>().Set<FieldNameBar>()
type FunctionBuilder struct {
    obj *Function
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewFunction().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewFunctionBuilder() *FunctionBuilder {
    return &FunctionBuilder{
        obj: NewFunction(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewFunction().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *FunctionBuilder) Emit() *Function {
    var objCopy Function = *x.obj
    return &objCopy
}

func (x *Function) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Function"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Function) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Function) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Function({")
    sb.WriteString("})")

    return sb.String()
}

type EnumValue struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &EnumValue{}

func NewEnumValue() *EnumValue {
    return (&EnumValue{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewEnumValue().Set<FieldNameFoo>().Set<FieldNameBar>()
type EnumValueBuilder struct {
    obj *EnumValue
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewEnumValue().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewEnumValueBuilder() *EnumValueBuilder {
    return &EnumValueBuilder{
        obj: NewEnumValue(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewEnumValue().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *EnumValueBuilder) Emit() *EnumValue {
    var objCopy EnumValue = *x.obj
    return &objCopy
}

func (x *EnumValue) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("EnumValue"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *EnumValue) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *EnumValue) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("EnumValue({")
    sb.WriteString("})")

    return sb.String()
}

type Const struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Const{}

func NewConst() *Const {
    return (&Const{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewConst().Set<FieldNameFoo>().Set<FieldNameBar>()
type ConstBuilder struct {
    obj *Const
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewConst().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewConstBuilder() *ConstBuilder {
    return &ConstBuilder{
        obj: NewConst(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewConst().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *ConstBuilder) Emit() *Const {
    var objCopy Const = *x.obj
    return &objCopy
}

func (x *Const) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Const"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Const) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Const) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Const({")
    sb.WriteString("})")

    return sb.String()
}

type Enum struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Enum{}

func NewEnum() *Enum {
    return (&Enum{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewEnum().Set<FieldNameFoo>().Set<FieldNameBar>()
type EnumBuilder struct {
    obj *Enum
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewEnum().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewEnumBuilder() *EnumBuilder {
    return &EnumBuilder{
        obj: NewEnum(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewEnum().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *EnumBuilder) Emit() *Enum {
    var objCopy Enum = *x.obj
    return &objCopy
}

func (x *Enum) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Enum"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Enum) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Enum) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Enum({")
    sb.WriteString("})")

    return sb.String()
}

type Structured struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Structured{}

func NewStructured() *Structured {
    return (&Structured{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewStructured().Set<FieldNameFoo>().Set<FieldNameBar>()
type StructuredBuilder struct {
    obj *Structured
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewStructured().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewStructuredBuilder() *StructuredBuilder {
    return &StructuredBuilder{
        obj: NewStructured(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewStructured().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *StructuredBuilder) Emit() *Structured {
    var objCopy Structured = *x.obj
    return &objCopy
}

func (x *Structured) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Structured"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Structured) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Structured) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Structured({")
    sb.WriteString("})")

    return sb.String()
}

type Interface struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Interface{}

func NewInterface() *Interface {
    return (&Interface{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewInterface().Set<FieldNameFoo>().Set<FieldNameBar>()
type InterfaceBuilder struct {
    obj *Interface
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewInterface().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewInterfaceBuilder() *InterfaceBuilder {
    return &InterfaceBuilder{
        obj: NewInterface(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewInterface().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *InterfaceBuilder) Emit() *Interface {
    var objCopy Interface = *x.obj
    return &objCopy
}

func (x *Interface) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Interface"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Interface) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Interface) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Interface({")
    sb.WriteString("})")

    return sb.String()
}

type RootDefinition struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &RootDefinition{}

func NewRootDefinition() *RootDefinition {
    return (&RootDefinition{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewRootDefinition().Set<FieldNameFoo>().Set<FieldNameBar>()
type RootDefinitionBuilder struct {
    obj *RootDefinition
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewRootDefinition().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewRootDefinitionBuilder() *RootDefinitionBuilder {
    return &RootDefinitionBuilder{
        obj: NewRootDefinition(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewRootDefinition().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *RootDefinitionBuilder) Emit() *RootDefinition {
    var objCopy RootDefinition = *x.obj
    return &objCopy
}

func (x *RootDefinition) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("RootDefinition"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RootDefinition) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RootDefinition) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RootDefinition({")
    sb.WriteString("})")

    return sb.String()
}

type Definition struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &Definition{}

func NewDefinition() *Definition {
    return (&Definition{})
}


// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewDefinition().Set<FieldNameFoo>().Set<FieldNameBar>()
type DefinitionBuilder struct {
    obj *Definition
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewDefinition().Set<FieldNameFoo>().Set<FieldNameBar>()
func NewDefinitionBuilder() *DefinitionBuilder {
    return &DefinitionBuilder{
        obj: NewDefinition(),
    }
}

// Deprecated: Use "New" constructor and setters to build your structs.
// e.g NewDefinition().Set<FieldNameFoo>().Set<FieldNameBar>()
func (x *DefinitionBuilder) Emit() *Definition {
    var objCopy Definition = *x.obj
    return &objCopy
}

func (x *Definition) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Definition"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Definition) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, wireType, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if wireType == thrift.STOP {
            break;
        }

        switch {
        default:
            if err := p.Skip(wireType); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Definition) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Definition({")
    sb.WriteString("})")

    return sb.String()
}

// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
  RegisterType(name string, initializer func() any)
}) {
    registry.RegisterType("facebook.com/thrift/annotation/Transitive", func() any { return NewTransitive() })
    registry.RegisterType("facebook.com/thrift/annotation/Program", func() any { return NewProgram() })
    registry.RegisterType("facebook.com/thrift/annotation/Struct", func() any { return NewStruct() })
    registry.RegisterType("facebook.com/thrift/annotation/Union", func() any { return NewUnion() })
    registry.RegisterType("facebook.com/thrift/annotation/Exception", func() any { return NewException() })
    registry.RegisterType("facebook.com/thrift/annotation/Field", func() any { return NewField() })
    registry.RegisterType("facebook.com/thrift/annotation/Typedef", func() any { return NewTypedef() })
    registry.RegisterType("facebook.com/thrift/annotation/Service", func() any { return NewService() })
    registry.RegisterType("facebook.com/thrift/annotation/Interaction", func() any { return NewInteraction() })
    registry.RegisterType("facebook.com/thrift/annotation/Function", func() any { return NewFunction() })
    registry.RegisterType("facebook.com/thrift/annotation/EnumValue", func() any { return NewEnumValue() })
    registry.RegisterType("facebook.com/thrift/annotation/Const", func() any { return NewConst() })
    registry.RegisterType("facebook.com/thrift/annotation/Enum", func() any { return NewEnum() })
    registry.RegisterType("facebook.com/thrift/annotation/Structured", func() any { return NewStructured() })
    registry.RegisterType("facebook.com/thrift/annotation/Interface", func() any { return NewInterface() })
    registry.RegisterType("facebook.com/thrift/annotation/RootDefinition", func() any { return NewRootDefinition() })
    registry.RegisterType("facebook.com/thrift/annotation/Definition", func() any { return NewDefinition() })

}
