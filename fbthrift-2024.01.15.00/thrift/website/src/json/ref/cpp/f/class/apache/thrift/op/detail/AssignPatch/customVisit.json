{
  "kind": "overloadset",
  "name_html": "customVisit",
  "compoundname_html": "apache::thrift::op::detail::AssignPatch::customVisit",
  "functions": [
    {
      "refid": "classapache_1_1thrift_1_1op_1_1detail_1_1AssignPatch_1a80c032658130af42aa63f66ef2933101",
      "prot": "public",
      "static": "no",
      "const": "yes",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "typename Visitor"
        }
      ],
      "type_html": "void",
      "definition_html": "void apache::thrift::op::detail::AssignPatch&lt; Patch &gt;::customVisit",
      "argsstring_html": "(Visitor &amp;&amp;v) const",
      "name_html": "customVisit",
      "param": [
        {
          "type_html": "Visitor &amp;&amp;",
          "declname_html": "v"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/detail/ValuePatch.h",
        "line": "63",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/detail/ValuePatch.h",
        "bodystart": "63",
        "bodyend": "67"
      },
      "definition": {
        "simple_html": "template &lt;typename Visitor&gt;\nvoid customVisit(Visitor&amp;&amp; v) const",
        "simple_raw": "template <typename Visitor>\nvoid customVisit(Visitor&& v) const",
        "detailed_html": "template &lt;typename Visitor&gt;\ninline void customVisit(Visitor&amp;&amp; v) const",
        "detailed_raw": "template <typename Visitor>\ninline void customVisit(Visitor&& v) const",
        "original_definition_html": "void apache::thrift::op::detail::AssignPatch&lt; Patch &gt;::customVisit",
        "original_argsstring_html": "(Visitor &amp;&amp;v) const"
      },
      "description": {
        "detailed_html": "<p>Users should provide a visitor with the following methods <pre>struct Visitor {\n  void assign(const MyClass&amp;);\n}\n</pre></p><p>For example: <pre>MyClassPatch patch;\npatch = myClass;\n</pre></p><p><code>patch.customVisit(v)</code> will invoke the following methods <pre>v.assign(myClass);  </pre> </p>",
        "brief_html": "<p>This API uses the Visitor pattern to describe how Patch is applied. For each operation that will be performed by the patch, the corresponding method (that matches the write API) will be invoked. </p>"
      },
      "filepath": "fns/class/apache/thrift/op/detail/AssignPatch/customVisit",
      "href": "/ref/cpp/fns/class/apache/thrift/op/detail/AssignPatch/customVisit",
      "parentid": "classapache_1_1thrift_1_1op_1_1detail_1_1AssignPatch",
      "compoundname_html": "apache::thrift::op::detail::AssignPatch::customVisit"
    }
  ],
  "filepath": "f/class/apache/thrift/op/detail/AssignPatch/customVisit",
  "minprot": "public",
  "displayname_html": "customVisit",
  "brief_html": "<p>This API uses the Visitor pattern to describe how Patch is applied. For each operation that will be performed by the patch, the corresponding method (that matches the write API) will be invoked. </p>",
  "groupname_html": "",
  "href": "/ref/cpp/f/class/apache/thrift/op/detail/AssignPatch/customVisit",
  "refid": "/ref/cpp/f/class/apache/thrift/op/detail/AssignPatch/customVisit"
}