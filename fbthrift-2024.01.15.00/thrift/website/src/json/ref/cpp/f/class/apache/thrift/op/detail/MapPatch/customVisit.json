{
  "kind": "overloadset",
  "name_html": "customVisit",
  "compoundname_html": "apache::thrift::op::detail::MapPatch::customVisit",
  "functions": [
    {
      "refid": "classapache_1_1thrift_1_1op_1_1detail_1_1MapPatch_1a52d977b658c91ede26119882c6548c97",
      "prot": "public",
      "static": "no",
      "const": "yes",
      "explicit": "no",
      "inline": "yes",
      "virtual": "non-virtual",
      "tparams": [
        {
          "type_html": "class Visitor"
        }
      ],
      "type_html": "void",
      "definition_html": "void apache::thrift::op::detail::MapPatch&lt; Patch &gt;::customVisit",
      "argsstring_html": "(Visitor &amp;&amp;v) const",
      "name_html": "customVisit",
      "param": [
        {
          "type_html": "Visitor &amp;&amp;",
          "declname_html": "v"
        }
      ],
      "location": {
        "file": "fbcode/thrift/lib/cpp2/op/detail/ContainerPatch.h",
        "line": "401",
        "column": "1",
        "bodyfile": "fbcode/thrift/lib/cpp2/op/detail/ContainerPatch.h",
        "bodystart": "401",
        "bodyend": "421"
      },
      "definition": {
        "simple_html": "template &lt;class Visitor&gt;\nvoid customVisit(Visitor&amp;&amp; v) const",
        "simple_raw": "template <class Visitor>\nvoid customVisit(Visitor&& v) const",
        "detailed_html": "template &lt;class Visitor&gt;\ninline void customVisit(Visitor&amp;&amp; v) const",
        "detailed_raw": "template <class Visitor>\ninline void customVisit(Visitor&& v) const",
        "original_definition_html": "void apache::thrift::op::detail::MapPatch&lt; Patch &gt;::customVisit",
        "original_argsstring_html": "(Visitor &amp;&amp;v) const"
      },
      "description": {
        "detailed_html": "<p>Users should provide a visitor with the following methods <pre>struct Visitor {\n  void assign(const Map&amp;);\n  void clear();\n  void add(const Map&amp;);\n  void put(const Map&amp;);\n  void remove(const std::unordered_set&lt;Key&gt;&amp;);\n  void patchIfSet(const std::unordered_map&lt;Key, ValuePatch&gt;&amp;);\n}\n</pre></p><p>For example: <pre>MapPatch&lt;MapI32StringPatch&gt; patch;\npatch.add({{10, \"10\"}});\npatch.ensureAndPatchByKey(20).append(\"_\");\n</pre></p><p><code>patch.customVisit(v)</code> will invoke the following methods <pre>v.add({{10, \"10\"}, {20, \"\"}});\nv.patchIfSet({{20, StringPatch::createAppend(\"_\")}});  </pre> </p>",
        "brief_html": "<p>This API uses the Visitor pattern to describe how Patch is applied. For each operation that will be performed by the patch, the corresponding method (that matches the write API) will be invoked. </p>"
      },
      "filepath": "fns/class/apache/thrift/op/detail/MapPatch/customVisit",
      "href": "/ref/cpp/fns/class/apache/thrift/op/detail/MapPatch/customVisit",
      "parentid": "classapache_1_1thrift_1_1op_1_1detail_1_1MapPatch",
      "compoundname_html": "apache::thrift::op::detail::MapPatch::customVisit"
    }
  ],
  "filepath": "f/class/apache/thrift/op/detail/MapPatch/customVisit",
  "minprot": "public",
  "displayname_html": "customVisit",
  "brief_html": "<p>This API uses the Visitor pattern to describe how Patch is applied. For each operation that will be performed by the patch, the corresponding method (that matches the write API) will be invoked. </p>",
  "groupname_html": "",
  "href": "/ref/cpp/f/class/apache/thrift/op/detail/MapPatch/customVisit",
  "refid": "/ref/cpp/f/class/apache/thrift/op/detail/MapPatch/customVisit"
}